{"version":3,"file":"vhall-saas-domain.es.js","sources":["../../src/domain/common/context.server.js","../../src/domain/common/msg.server.js","../../src/domain/stream/interactive.server.js","../../src/libs/sdk.js","../../src/utils/http.js","../../src/request/roomBase.js","../../src/utils/http.js","../../src/domain/common/context.server.js","../../src/request/user.js","../../src/request/index.js","../../src/domain/roombase/roombase.server.js","../../src/domain/user/user.server.js","../../src/domain/roombase/roomInit.group.server.js"],"sourcesContent":["\r\nfunction useContextServer() {\r\n    const state = {\r\n        serverPool: {}\r\n    }\r\n\r\n    const set = (key, server) => {\r\n        const { serverPool } = state;\r\n        serverPool[key] = server;\r\n    }\r\n\r\n    const get = (key) => {\r\n        const { serverPool } = state;\r\n        return serverPool[key]\r\n    }\r\n\r\n    const show = () => {\r\n        const { serverPool } = state;\r\n        return serverPool\r\n    }\r\n\r\n    return { set, get, show }\r\n}\r\n\r\nconst contextServer = useContextServer()\r\nexport default contextServer;\r\n","import contextServer from '@/domain/common/context.server.js'\r\n\r\nexport default function useMsgServer() {\r\n    const state = {\r\n        msgInstance: null\r\n    }\r\n\r\n    const init = () => {\r\n        if (!contextServer.get('roomInitGroupServer')) return\r\n        const { state: roomInitGroupServer } = contextServer.get('roomInitGroupServer')\r\n        return roomInitGroupServer.vhallSaasInstance.createChat().then(res => {\r\n            state.msgInstance = res\r\n            return res\r\n        })\r\n    }\r\n\r\n    const $on = (eventType, fn) => {\r\n        if (!state.msgInstance) return;\r\n        state.msgInstance.$on(eventType, fn);\r\n    }\r\n\r\n    const $emit = (eventType, params) => {\r\n        if (!state.msgInstance) return;\r\n        state.msgInstance.$emit(eventType, params);\r\n    }\r\n\r\n    const destroy = () => {\r\n        if (!state.msgInstance) return\r\n        state.msgInstance.destroy\r\n        state.msgInstance = null\r\n    }\r\n\r\n    return { state, init, destroy, $on, $emit }\r\n}\r\n","import contextServer from \"@/domain/common/context.server.js\"\r\n\r\nexport default function useInteractiveServer() {\r\n    let state = {\r\n        vhallSaasInstance: null,  // vhallsdk的实例\r\n        interactiveInstance: null,  // 互动实例\r\n        streamId: null,\r\n        remoteStreams:[] // 远端流数组\r\n    }\r\n\r\n    const init = (option) => {\r\n        const roomInitGroupServer = contextServer.get('roomInitGroupServer');\r\n        state.vhallSaasInstance = roomInitGroupServer.state.vhallSaasInstance;\r\n        return state.vhallSaasInstance.createInteractive().then(interactives => {\r\n            state.interactiveInstance = interactives\r\n            console.log('state.interactiveInstance',interactives,interactives.instance)\r\n            return true\r\n        })\r\n    }\r\n    // 基础api\r\n    // 常见本地流\r\n    const createLocalStream = (options = {}, addConfig = {}) => {\r\n        return state.interactiveInstance.createLocalStream(options)\r\n    }\r\n    // 创建摄像头视频流\r\n    const createLocalVideoStream = (options = {}, addConfig = {}) => {\r\n        return state.interactiveInstance.createLocalVideoStream(options, addConfig)\r\n    }\r\n    // 创建桌面共享流\r\n    const createLocaldesktopStream = (options = {}, addConfig = {}) => {\r\n        return state.interactiveInstance.createLocaldesktopStream(options, addConfig)\r\n    }\r\n    // 创建本地音频流\r\n    const createLocalAudioStream = (options = {}, addConfig = {}) => {\r\n        return state.interactiveInstance.createLocalAudioStream(options, addConfig)\r\n    }\r\n    // 创建图片推流\r\n    const createLocalPhotoStream = (options = {}, addConfig = {}) => {\r\n        return state.interactiveInstance.createLocalPhotoStream(options, addConfig)\r\n    }\r\n    // 销毁额本地流\r\n    const stopStream = (streamId) => {\r\n        return state.interactiveInstance.destroyStream(state.streamId || streamId)\r\n    }\r\n    // 推送本地流到远端\r\n    const publishStream = (options = {}) => {\r\n        return state.interactiveInstance.publishStream({ streamId: state.streamId || options.streamId })\r\n    }\r\n    // 取消推送到远端的流\r\n    const unpublishStream = (streamId) => {\r\n        return state.interactiveInstance.unpublishStream(state.streamId || streamId)\r\n    }\r\n    // 订阅远端流\r\n    const subscribeStream = (options = {}) => {\r\n        return state.interactiveInstance.subscribeStream(options)\r\n    }\r\n    // 取消订阅远端流\r\n    const unSubscribeStream = (streamId) => {\r\n        return state.interactiveInstance.unSubscribeStream(streamId)\r\n    }\r\n    // 设置大小流\r\n    const setDual = (options = {}) => {\r\n        return state.interactiveInstance.setDual(options)\r\n    }\r\n    // 改变视频的禁用和启用\r\n    const muteVideo = (options = {}) => {\r\n        return state.interactiveInstance.muteVideo(options)\r\n    }\r\n    // 改变音频的禁用和启用\r\n    const muteAudio = (options = {}) => {\r\n        return state.interactiveInstance.muteAudio(options)\r\n    }\r\n    // 开启旁路\r\n    const startBroadCast = (options = {}, addConfig = {}) => {\r\n        return state.interactiveInstance.startBroadCast(options, addConfig)\r\n    }\r\n    // 停止旁路\r\n    const stopBroadCast = () => {\r\n        return state.interactiveInstance.stopBroadCast()\r\n    }\r\n    // 动态配置指定旁路布局模板\r\n    const setBroadCastLayout = (options = {}) => {\r\n        return state.interactiveInstance.setBroadCastLayout(options)\r\n    }\r\n    // 动态配置旁路主屏\r\n    const setBroadCastScreen = (mainScreenStreamId = '') => {\r\n        return state.interactiveInstance.setBroadCastScreen(mainScreenStreamId)\r\n    }\r\n    // 获取全部音视频列表\r\n    const getDevices = () => {\r\n        return state.interactiveInstance.getDevices()\r\n    }\r\n    // 获取摄像头列表\r\n    const getCameras = () => {\r\n        return state.interactiveInstance.getCameras()\r\n    }\r\n    // 获取麦克风列表\r\n    const getMicrophones = () => {\r\n        return state.interactiveInstance.getMicrophones()\r\n    }\r\n    // 获取扬声器列表\r\n    const getSpeakers = () => {\r\n        return state.interactiveInstance.getSpeakers()\r\n    }\r\n    // 获取设备的分辨率\r\n    const getVideoConstraints = (deviceId = '') => {\r\n        return state.interactiveInstance.getSpeakers(deviceId)\r\n    }\r\n    // 是否支持桌面共享\r\n    const isScreenShareSupported = () => {\r\n        return state.interactiveInstance.isScreenShareSupported()\r\n    }\r\n    // 检查当前浏览器支持性\r\n    const checkSystemRequirements = async () => {\r\n        if(!state.interactiveInstance)return;\r\n        console.log('state:', state.interactiveInstance)\r\n        return state.interactiveInstance.checkSystemRequirements()\r\n    }\r\n    // 获取上下行丢包率\r\n    const getPacketLossRate = () => {\r\n        return state.interactiveInstance.getPacketLossRate()\r\n    }\r\n    // 获取房间流信息\r\n    const getRoomStreams = () => {\r\n        return state.interactiveInstance.getRoomStreams()\r\n    }\r\n\r\n\r\n\r\n\r\n\r\n\r\n    // 组合api\r\n    const startPushStream = ()=> {\r\n        console.log('state:',state)\r\n        createLocalAndPushStream(state.interactiveInstance)\r\n    }\r\n\r\n    // 创建本地的推流和推流\r\n    const createLocalAndPushStream = (interactive) => {\r\n        let camerasList = null, micropsList = null, videoConstraintsList = null, streamId = null\r\n        return interactive.getDevices().then((data) => {\r\n            console.log('devices list::', data);\r\n            camerasList = data.videoInputDevices.filter(d => d.label && d.deviceId != 'desktopScreen')\r\n            micropsList = data.audioInputDevices.filter(\r\n                d => d.deviceId != 'default' && d.deviceId != 'communications' && d.label\r\n            )\r\n        }).then(() => {\r\n            const RESOLUTION_REG = /((^VIDEO_PROFILE_(720P|540P|480P|360P)_1$)|(^RTC_VIDEO_PROFILE_(720P|540P|480P|360P)_16x9_M$))/\r\n            interactive.getVideoConstraints(camerasList[0].deviceId).then((data) => {\r\n                console.log('constrainList', data);\r\n                videoConstraintsList = data.filter(item => RESOLUTION_REG.test(item.label))\r\n            }).then(() => {\r\n                let params = {\r\n                    videoNode: 'vhall-video',\r\n                    videoDevice: camerasList[0].deviceId,\r\n                    audioDevice: micropsList[0].deviceId,\r\n                    profile: videoConstraintsList[0]\r\n                }\r\n                interactive.createLocalVideoStream(params).then((res) => {\r\n                    console.log('create local stream success::', res);\r\n                    state.streamId = res\r\n                    streamId = res\r\n                }).then(() => {\r\n                    interactive.publishStream({ streamId }).then((res) => {\r\n                        console.log('publish stream success::', streamId);\r\n                    })\r\n                        .catch((err) => {\r\n                            console.log('publish is failed::', err);\r\n                        })\r\n                }).catch((err) => {\r\n                    console.log('local stream failed::', err);\r\n                })\r\n            }).catch((err) => {\r\n                console.log('constrainlist is failed::', err);\r\n            })\r\n        }).catch((err) => {\r\n            console.log('getDevies is failed::', err);\r\n        })\r\n    }\r\n    // 订阅流列表\r\n    const remoteStreamList = ()=> {\r\n        state.remoteStreams = state.interactiveInstance.getRemoteStreams()\r\n        for (const remoteStream in state.interactiveInstance.getRemoteStreams()) {\r\n            state.remoteStreams.push(remoteStream)\r\n        }\r\n        return state.remoteStreams\r\n    }\r\n    // sdk的监听事件\r\n    const listenerSdk = () => {\r\n        state.interactiveInstance.on(VhallRTC.EVENT_REMOTESTREAM_ADD, (e) => {\r\n            // 0: 纯音频, 1: 只是视频, 2: 音视频  3: 屏幕共享, 4: 插播\r\n            console.log('remote stream add info::',e);\r\n            state.remoteStreams.push(e)\r\n        })\r\n        state.interactiveInstance.on(VhallRTC.EVENT_REMOTESTREAM_REMOVED, (e) => {\r\n            // 0: 纯音频, 1: 只是视频, 2: 音视频  3: 屏幕共享, 4: 插播\r\n            console.log('remote stream remove info::',e);\r\n            state.remoteStreams.filter(item => item.streamId == e.streamId)\r\n        })\r\n    }\r\n    return { state, startPushStream ,init, createLocalStream, createLocalVideoStream, createLocaldesktopStream, createLocalAudioStream,\r\n    createLocalPhotoStream, stopStream, publishStream, unpublishStream, subscribeStream, unSubscribeStream, setDual, muteVideo,\r\n    muteAudio, startBroadCast, stopBroadCast, setBroadCastLayout, setBroadCastScreen, getDevices, getCameras, getMicrophones,\r\n    getSpeakers, getVideoConstraints, isScreenShareSupported, checkSystemRequirements, getPacketLossRate, getRoomStreams, remoteStreamList}\r\n\r\n}","(function (factory) {\r\n  typeof define === 'function' && define.amd ? define(factory) :\r\n  factory();\r\n})((function () { 'use strict';\r\n\r\n  function ownKeys(object, enumerableOnly) {\r\n    var keys = Object.keys(object);\r\n\r\n    if (Object.getOwnPropertySymbols) {\r\n      var symbols = Object.getOwnPropertySymbols(object);\r\n\r\n      if (enumerableOnly) {\r\n        symbols = symbols.filter(function (sym) {\r\n          return Object.getOwnPropertyDescriptor(object, sym).enumerable;\r\n        });\r\n      }\r\n\r\n      keys.push.apply(keys, symbols);\r\n    }\r\n\r\n    return keys;\r\n  }\r\n\r\n  function _objectSpread2(target) {\r\n    for (var i = 1; i < arguments.length; i++) {\r\n      var source = arguments[i] != null ? arguments[i] : {};\r\n\r\n      if (i % 2) {\r\n        ownKeys(Object(source), true).forEach(function (key) {\r\n          _defineProperty(target, key, source[key]);\r\n        });\r\n      } else if (Object.getOwnPropertyDescriptors) {\r\n        Object.defineProperties(target, Object.getOwnPropertyDescriptors(source));\r\n      } else {\r\n        ownKeys(Object(source)).forEach(function (key) {\r\n          Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));\r\n        });\r\n      }\r\n    }\r\n\r\n    return target;\r\n  }\r\n\r\n  function _typeof(obj) {\r\n    \"@babel/helpers - typeof\";\r\n\r\n    if (typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\") {\r\n      _typeof = function (obj) {\r\n        return typeof obj;\r\n      };\r\n    } else {\r\n      _typeof = function (obj) {\r\n        return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj;\r\n      };\r\n    }\r\n\r\n    return _typeof(obj);\r\n  }\r\n\r\n  function _classCallCheck(instance, Constructor) {\r\n    if (!(instance instanceof Constructor)) {\r\n      throw new TypeError(\"Cannot call a class as a function\");\r\n    }\r\n  }\r\n\r\n  function _defineProperties(target, props) {\r\n    for (var i = 0; i < props.length; i++) {\r\n      var descriptor = props[i];\r\n      descriptor.enumerable = descriptor.enumerable || false;\r\n      descriptor.configurable = true;\r\n      if (\"value\" in descriptor) descriptor.writable = true;\r\n      Object.defineProperty(target, descriptor.key, descriptor);\r\n    }\r\n  }\r\n\r\n  function _createClass(Constructor, protoProps, staticProps) {\r\n    if (protoProps) _defineProperties(Constructor.prototype, protoProps);\r\n    if (staticProps) _defineProperties(Constructor, staticProps);\r\n    return Constructor;\r\n  }\r\n\r\n  function _defineProperty(obj, key, value) {\r\n    if (key in obj) {\r\n      Object.defineProperty(obj, key, {\r\n        value: value,\r\n        enumerable: true,\r\n        configurable: true,\r\n        writable: true\r\n      });\r\n    } else {\r\n      obj[key] = value;\r\n    }\r\n\r\n    return obj;\r\n  }\r\n\r\n  function _inherits(subClass, superClass) {\r\n    if (typeof superClass !== \"function\" && superClass !== null) {\r\n      throw new TypeError(\"Super expression must either be null or a function\");\r\n    }\r\n\r\n    subClass.prototype = Object.create(superClass && superClass.prototype, {\r\n      constructor: {\r\n        value: subClass,\r\n        writable: true,\r\n        configurable: true\r\n      }\r\n    });\r\n    if (superClass) _setPrototypeOf(subClass, superClass);\r\n  }\r\n\r\n  function _getPrototypeOf(o) {\r\n    _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) {\r\n      return o.__proto__ || Object.getPrototypeOf(o);\r\n    };\r\n    return _getPrototypeOf(o);\r\n  }\r\n\r\n  function _setPrototypeOf(o, p) {\r\n    _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) {\r\n      o.__proto__ = p;\r\n      return o;\r\n    };\r\n\r\n    return _setPrototypeOf(o, p);\r\n  }\r\n\r\n  function _isNativeReflectConstruct() {\r\n    if (typeof Reflect === \"undefined\" || !Reflect.construct) return false;\r\n    if (Reflect.construct.sham) return false;\r\n    if (typeof Proxy === \"function\") return true;\r\n\r\n    try {\r\n      Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {}));\r\n      return true;\r\n    } catch (e) {\r\n      return false;\r\n    }\r\n  }\r\n\r\n  function _assertThisInitialized(self) {\r\n    if (self === void 0) {\r\n      throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\");\r\n    }\r\n\r\n    return self;\r\n  }\r\n\r\n  function _possibleConstructorReturn(self, call) {\r\n    if (call && (typeof call === \"object\" || typeof call === \"function\")) {\r\n      return call;\r\n    } else if (call !== void 0) {\r\n      throw new TypeError(\"Derived constructors may only return object or undefined\");\r\n    }\r\n\r\n    return _assertThisInitialized(self);\r\n  }\r\n\r\n  function _createSuper(Derived) {\r\n    var hasNativeReflectConstruct = _isNativeReflectConstruct();\r\n\r\n    return function _createSuperInternal() {\r\n      var Super = _getPrototypeOf(Derived),\r\n          result;\r\n\r\n      if (hasNativeReflectConstruct) {\r\n        var NewTarget = _getPrototypeOf(this).constructor;\r\n\r\n        result = Reflect.construct(Super, arguments, NewTarget);\r\n      } else {\r\n        result = Super.apply(this, arguments);\r\n      }\r\n\r\n      return _possibleConstructorReturn(this, result);\r\n    };\r\n  }\r\n\r\n  var mountSDK = function mountSDK(src) {\r\n    return new Promise(function (resolve) {\r\n      var node = document.createElement('script');\r\n      document.head.appendChild(node);\r\n      node.src = src;\r\n\r\n      node.onload = function () {\r\n        resolve();\r\n      };\r\n    });\r\n  };\r\n\r\n  /**\r\n   * ajax请求 jsonp处理\r\n   * 1.jsonp 请求格式\r\n   *   $fetch({\r\n   *      url:'',\r\n   *      type: 'GET',\r\n   *      jsonp: 'callback',\r\n   *      data: {\r\n   *        name: 123\r\n   *      }\r\n   *   })\r\n   */\r\n  var BUSE_URL = '';\r\n  var TOKEN = '';\r\n  var LIVETOKEN = '';\r\n  var HEADERS = null;\r\n\r\n  function setBaseUrl(url) {\r\n    BUSE_URL = url;\r\n  }\r\n\r\n  function setToken(token, livetoken) {\r\n    console.log(token, livetoken, 888);\r\n    TOKEN = token;\r\n    LIVETOKEN = livetoken;\r\n  }\r\n\r\n  function setRequestHeaders(options) {\r\n    HEADERS = _objectSpread2({}, options);\r\n  }\r\n\r\n  function $fetch(options) {\r\n    // if (\"development\" != 'development') {\r\n    //\r\n    // }\r\n    options.url = BUSE_URL + options.url;\r\n    console.log('接口环境', options.url);\r\n    return new Promise(function (resolve, reject) {\r\n      options = options || {};\r\n\r\n      if (options.data) {\r\n        if (LIVETOKEN) {\r\n          options.data.live_token = LIVETOKEN;\r\n        }\r\n\r\n        options.data = formatParams(options.data);\r\n      }\r\n\r\n      options.dataType ? jsonp(options, resolve, reject) : json(options, resolve, reject);\r\n    });\r\n  } // JSON请求\r\n\r\n\r\n  function json(params, success, fail) {\r\n    var xhr = null; // interactToken = sessionStorage.getItem('interact-token') || '',\r\n    // grayId = sessionStorage.getItem('grayId') || '',\r\n    // vhallJSSDKUserInfo = localStorage.getItem('vhallJSSDKUserInfo') ? JSON.parse(localStorage.getItem('vhallJSSDKUserInfo')) : {},\r\n\r\n    params.type = (params.type || 'GET').toUpperCase();\r\n\r\n    if (window.XMLHttpRequest) {\r\n      xhr = new XMLHttpRequest();\r\n    } else {\r\n      xhr = new ActiveXObject('Microsoft.XMLHTTP');\r\n    }\r\n\r\n    xhr.onreadystatechange = function () {\r\n      if (xhr.readyState == 4) {\r\n        var status = xhr.status;\r\n\r\n        if (status >= 200 && status < 300) {\r\n          var response = '';\r\n          var type = xhr.getResponseHeader('Content-type');\r\n\r\n          if (type.indexOf('xml') !== -1 && xhr.responseXML) {\r\n            response = xhr.responseXML;\r\n          } else if (type === 'application/json' || type === 'application/json;charset=UTF-8') {\r\n            response = JSON.parse(xhr.responseText);\r\n          } else {\r\n            response = xhr.responseText;\r\n          }\r\n\r\n          success && success(response);\r\n        } else {\r\n          fail && fail(status);\r\n        }\r\n      }\r\n    };\r\n\r\n    if (params.type == 'GET') {\r\n      if (params.data) {\r\n        xhr.open(params.type, params.url + '?' + params.data, true);\r\n      } else {\r\n        xhr.open(params.type, params.url, true);\r\n      }\r\n    } else if (params.type == 'POST') {\r\n      xhr.open(params.type, params.url, true);\r\n    }\r\n\r\n    xhr.setRequestHeader('Content-Type', 'application/x-www-form-urlencoded');\r\n\r\n    if (!LIVETOKEN) {\r\n      TOKEN && xhr.setRequestHeader('token', TOKEN);\r\n    }\r\n\r\n    if (HEADERS) {\r\n      Object.getOwnPropertyNames(HEADERS).forEach(function (item) {\r\n        xhr.setRequestHeader(item, HEADERS[item]);\r\n      });\r\n    } // if (params.headers && params.headers.activeType == 'new') {\r\n    //     xhr.setRequestHeader('platform', 18)\r\n    //     xhr.setRequestHeader('request-id', uuid())\r\n    //     grayId && xhr.setRequestHeader('gray-id', grayId)\r\n    //     interactToken && xhr.setRequestHeader('interact-token', interactToken)\r\n    //     token && xhr.setRequestHeader('token', token)\r\n    // }\r\n\r\n\r\n    if (params.type == 'GET') {\r\n      xhr.send(null);\r\n    } else {\r\n      xhr.send(params.data);\r\n    }\r\n  } // JSONP请求\r\n\r\n\r\n  function jsonp(params, success, fail) {\r\n    var callbackName = params.dataType;\r\n    params['callback'] = callbackName;\r\n    var script = document.createElement('script');\r\n    script.type = \"text/javascript\";\r\n    script.charset = \"utf-8\";\r\n    document.body.appendChild(script); // 创建回调函数\r\n\r\n    window[callbackName] = function (val) {\r\n      document.body.removeChild(script);\r\n      clearTimeout(script.timer);\r\n      window[callbackName] = null;\r\n      success && success(val);\r\n    };\r\n    script.src = \"\".concat(params.url, \"?\").concat(params.data, \"&_=\", 1594014089800); // 超时处理\r\n\r\n    if (params.time) {\r\n      script.timer = setTimeout(function () {\r\n        window[callbackName] = null;\r\n        head.removeChild(script);\r\n        fail && fail('请求超时');\r\n      }, parmas.time * 1000);\r\n    }\r\n  } // 格式化数据\r\n\r\n\r\n  function formatParams(data) {\r\n    var arr = [];\r\n\r\n    if (data) {\r\n      for (var item in data) {\r\n        arr.push(encodeURIComponent(item) + '=' + encodeURIComponent(data[item]));\r\n      }\r\n    }\r\n\r\n    return arr.join('&');\r\n  } // 随机数\r\n\r\n  var Store = /*#__PURE__*/function () {\r\n    function Store() {\r\n      _classCallCheck(this, Store);\r\n\r\n      this.state = {};\r\n    }\r\n\r\n    _createClass(Store, [{\r\n      key: \"set\",\r\n      value: function set(key, value) {\r\n        this.state[key] = value;\r\n      }\r\n    }, {\r\n      key: \"get\",\r\n      value: function get(key) {\r\n        return this.state[key];\r\n      }\r\n    }]);\r\n\r\n    return Store;\r\n  }();\r\n\r\n  var store = new Store();\r\n\r\n  var getRoomInfo = function getRoomInfo(res) {\r\n    var _data = res.data;\r\n    return {\r\n      webinar: {\r\n        type: _data.webinar.type,\r\n        id: _data.webinar.id\r\n      },\r\n      paasInfo: {\r\n        channel_id: _data.interact.channel_id,\r\n        inav_id: _data.interact.inav_id,\r\n        paas_access_token: _data.interact.paas_access_token,\r\n        paas_app_id: _data.interact.paas_app_id,\r\n        room_id: _data.interact.room_id\r\n      },\r\n      userInfo: {\r\n        avatar: _data.join_info.avatar,\r\n        is_gag: _data.join_info.is_gag,\r\n        is_kick: _data.join_info.is_kick,\r\n        join_id: _data.join_info.join_id,\r\n        nickname: _data.join_info.nickname,\r\n        role_name: _data.join_info.role_name,\r\n        third_party_user_id: _data.join_info.third_party_user_id\r\n      },\r\n      reportData: {\r\n        guid: _data.report_data.guid,\r\n        aid: _data.interact.room_id,\r\n        report_extra: _data.report_data.report_extra\r\n      }\r\n    };\r\n  };\r\n\r\n  function getDefaultExportFromCjs (x) {\r\n  \treturn x && x.__esModule && Object.prototype.hasOwnProperty.call(x, 'default') ? x['default'] : x;\r\n  }\r\n\r\n  var src = {exports: {}};\r\n\r\n  (function (module, exports) {\r\n\r\n    Object.defineProperty(exports, \"__esModule\", {\r\n      value: true\r\n    });\r\n    exports.isPlainObject = exports.clone = exports.recursive = exports.merge = exports.main = void 0;\r\n    module.exports = exports = main;\r\n    exports[\"default\"] = main;\r\n\r\n    function main() {\r\n      var items = [];\r\n\r\n      for (var _i = 0; _i < arguments.length; _i++) {\r\n        items[_i] = arguments[_i];\r\n      }\r\n\r\n      return merge.apply(void 0, items);\r\n    }\r\n\r\n    exports.main = main;\r\n    main.clone = clone;\r\n    main.isPlainObject = isPlainObject;\r\n    main.recursive = recursive;\r\n\r\n    function merge() {\r\n      var items = [];\r\n\r\n      for (var _i = 0; _i < arguments.length; _i++) {\r\n        items[_i] = arguments[_i];\r\n      }\r\n\r\n      return _merge(items[0] === true, false, items);\r\n    }\r\n\r\n    exports.merge = merge;\r\n\r\n    function recursive() {\r\n      var items = [];\r\n\r\n      for (var _i = 0; _i < arguments.length; _i++) {\r\n        items[_i] = arguments[_i];\r\n      }\r\n\r\n      return _merge(items[0] === true, true, items);\r\n    }\r\n\r\n    exports.recursive = recursive;\r\n\r\n    function clone(input) {\r\n      if (Array.isArray(input)) {\r\n        var output = [];\r\n\r\n        for (var index = 0; index < input.length; ++index) {\r\n          output.push(clone(input[index]));\r\n        }\r\n\r\n        return output;\r\n      } else if (isPlainObject(input)) {\r\n        var output = {};\r\n\r\n        for (var index in input) {\r\n          output[index] = clone(input[index]);\r\n        }\r\n\r\n        return output;\r\n      } else {\r\n        return input;\r\n      }\r\n    }\r\n\r\n    exports.clone = clone;\r\n\r\n    function isPlainObject(input) {\r\n      return input && _typeof(input) === 'object' && !Array.isArray(input);\r\n    }\r\n\r\n    exports.isPlainObject = isPlainObject;\r\n\r\n    function _recursiveMerge(base, extend) {\r\n      if (!isPlainObject(base)) return extend;\r\n\r\n      for (var key in extend) {\r\n        if (key === '__proto__' || key === 'constructor' || key === 'prototype') continue;\r\n        base[key] = isPlainObject(base[key]) && isPlainObject(extend[key]) ? _recursiveMerge(base[key], extend[key]) : extend[key];\r\n      }\r\n\r\n      return base;\r\n    }\r\n\r\n    function _merge(isClone, isRecursive, items) {\r\n      var result;\r\n      if (isClone || !isPlainObject(result = items.shift())) result = {};\r\n\r\n      for (var index = 0; index < items.length; ++index) {\r\n        var item = items[index];\r\n        if (!isPlainObject(item)) continue;\r\n\r\n        for (var key in item) {\r\n          if (key === '__proto__' || key === 'constructor' || key === 'prototype') continue;\r\n          var value = isClone ? clone(item[key]) : item[key];\r\n          result[key] = isRecursive ? _recursiveMerge(result[key], value) : value;\r\n        }\r\n      }\r\n\r\n      return result;\r\n    }\r\n  })(src, src.exports);\r\n\r\n  var merge = /*@__PURE__*/getDefaultExportFromCjs(src.exports);\r\n\r\n  /**\r\n   * 判断终端类型\r\n   *\r\n   * @export\r\n   * @param {*} target\r\n   * @returns\r\n   */\r\n\r\n  function isPc(target) {\r\n    var userAgentInfo = navigator.userAgent;\r\n    var Agents = [\"Android\", \"iPhone\", \"SymbianOS\", \"Windows Phone\", \"iPad\", \"iPod\"];\r\n    var flag = true;\r\n\r\n    for (var v = 0; v < Agents.length; v++) {\r\n      if (userAgentInfo.indexOf(Agents[v]) > 0) {\r\n        flag = false;\r\n        break;\r\n      }\r\n    }\r\n\r\n    return flag;\r\n  }\r\n\r\n  var initSendLive = function initSendLive(params) {\r\n    var retParmams = {\r\n      webinar_id: params.webinarId,\r\n      live_token: params.live_token || '',\r\n      nickname: params.nickname || '',\r\n      email: params.email || '',\r\n      biz_id: params.biz_id || ''\r\n    };\r\n    return new Promise(function (resolve, reject) {\r\n      $fetch({\r\n        url: '/v3/webinars/live/init',\r\n        type: 'GET',\r\n        data: retParmams\r\n      }).then(function (res) {\r\n        resolve(res);\r\n      })[\"catch\"](function (e) {\r\n        return reject(e);\r\n      });\r\n    });\r\n  }; // 观看端初始化（标品）\r\n\r\n\r\n  var initStandardReceiveLive = function initStandardReceiveLive(params) {\r\n    var retParmams = {\r\n      webinar_id: params.webinarId,\r\n      visitor_id: params.visitor_id || '',\r\n      record_id: params.record_id || '',\r\n      refer: params.refer || '',\r\n      biz_id: params.biz_id || ''\r\n    };\r\n    return new Promise(function (resolve, reject) {\r\n      $fetch({\r\n        url: '/v3/webinars/watch/init',\r\n        type: 'GET',\r\n        data: retParmams\r\n      }).then(function (res) {\r\n        resolve(res);\r\n      })[\"catch\"](function (e) {\r\n        return reject(e);\r\n      });\r\n    });\r\n  }; // 观看端初始化（嵌入页）\r\n\r\n\r\n  var initEmbeddedReceiveLive = function initEmbeddedReceiveLive(params) {\r\n    var retParmams = {\r\n      webinar_id: params.webinarId,\r\n      visitor_id: params.visitor_id || '',\r\n      record_id: params.record_id || '',\r\n      email: params.email || '',\r\n      nickname: params.nickname || '',\r\n      k: params.k || '',\r\n      state: params.state || '',\r\n      refer: params.refer || '',\r\n      sign: params.sign || '',\r\n      ts: params.ts || '',\r\n      biz_id: params.biz_id || ''\r\n    };\r\n    return new Promise(function (resolve, reject) {\r\n      $fetch({\r\n        url: '/v3/webinars/watch/inline-init',\r\n        type: 'GET',\r\n        data: retParmams\r\n      }).then(function (res) {\r\n        resolve(res);\r\n      })[\"catch\"](function (e) {\r\n        return reject(e);\r\n      });\r\n    });\r\n  }; // 观看端初始化（SDK）\r\n\r\n\r\n  var initSdkReceiveLive = function initSdkReceiveLive(params) {\r\n    var retParmams = {\r\n      webinar_id: params.webinarId,\r\n      record_id: params.record_id || '',\r\n      email: params.email || '',\r\n      nickname: params.nickname || '',\r\n      pass: params.pass || '',\r\n      k: params.k || '',\r\n      refer: params.refer || '',\r\n      qrcode: params.qrcode || '',\r\n      share_id: params.share_id || '',\r\n      visitor_id: params.visitor_id || '',\r\n      biz_id: params.biz_id || ''\r\n    };\r\n    return new Promise(function (resolve, reject) {\r\n      $fetch({\r\n        url: '/v3/webinars/watch/sdk-init',\r\n        type: 'GET',\r\n        data: retParmams\r\n      }).then(function (res) {\r\n        resolve(res);\r\n      })[\"catch\"](function (e) {\r\n        return reject(e);\r\n      });\r\n    });\r\n  }; // 开始直播\r\n\r\n\r\n  var startLive = function startLive(params) {\r\n    var _store$get = store.get('roomInitData'),\r\n        _store$get$webinar = _store$get.webinar,\r\n        webinar = _store$get$webinar === void 0 ? {} : _store$get$webinar;\r\n\r\n    var defaultParams = {\r\n      webinar_id: webinar.id\r\n    };\r\n    var retParmams = merge.recursive({}, defaultParams, params);\r\n    return new Promise(function (resolve, reject) {\r\n      $fetch({\r\n        url: '/v3/webinars/live/start',\r\n        type: 'POST',\r\n        data: retParmams\r\n      }).then(function (res) {\r\n        return resolve(res);\r\n      })[\"catch\"](function (e) {\r\n        return reject(e);\r\n      });\r\n    });\r\n  }; // 结束直播\r\n\r\n\r\n  var endLive = function endLive(params) {\r\n    var _store$get2 = store.get('roomInitData'),\r\n        _store$get2$webinar = _store$get2.webinar,\r\n        webinar = _store$get2$webinar === void 0 ? {} : _store$get2$webinar;\r\n\r\n    var defaultParams = {\r\n      webinar_id: webinar.id\r\n    };\r\n    var retParmams = merge.recursive({}, defaultParams, params);\r\n    return new Promise(function (resolve, reject) {\r\n      $fetch({\r\n        url: '/v3/webinars/live/end',\r\n        type: 'POST',\r\n        data: retParmams\r\n      }).then(function (res) {\r\n        return resolve(res);\r\n      })[\"catch\"](function (e) {\r\n        return reject(e);\r\n      });\r\n    });\r\n  }; // 进入直播前检测\r\n\r\n\r\n  var checkLive = function checkLive(params) {\r\n    var _store$get3 = store.get('roomInitData'),\r\n        _store$get3$webinar = _store$get3.webinar,\r\n        webinar = _store$get3$webinar === void 0 ? {} : _store$get3$webinar;\r\n\r\n    var defaultParams = {\r\n      webinar_id: webinar.id\r\n    };\r\n    var retParmams = merge.recursive({}, defaultParams, params);\r\n    return new Promise(function (resolve, reject) {\r\n      $fetch({\r\n        url: '/v3/webinars/live/check',\r\n        type: 'GET',\r\n        data: retParmams\r\n      }).then(function (res) {\r\n        return resolve(res);\r\n      })[\"catch\"](function (e) {\r\n        return reject(e);\r\n      });\r\n    });\r\n  }; // 获取聊天服务链接参数\r\n\r\n\r\n  var getChatInitOptions = function getChatInitOptions(params) {\r\n    var _store$get4 = store.get('roomInitData'),\r\n        _store$get4$webinar = _store$get4.webinar,\r\n        webinar = _store$get4$webinar === void 0 ? {} : _store$get4$webinar;\r\n\r\n    var defaultParams = {\r\n      webinar_id: webinar.id\r\n    };\r\n    var retParmams = merge.recursive({}, defaultParams, params);\r\n    return new Promise(function (resolve, reject) {\r\n      $fetch({\r\n        url: '/v3/webinars/live/get-connect',\r\n        type: 'GET',\r\n        data: retParmams\r\n      }).then(function (res) {\r\n        return resolve(res);\r\n      })[\"catch\"](function (e) {\r\n        return reject(e);\r\n      });\r\n    });\r\n  }; // 心跳检测\r\n\r\n\r\n  var liveHeartBeat = function liveHeartBeat(params) {\r\n    return new Promise(function (resolve, reject) {\r\n      $fetch({\r\n        url: '/v3/webinars/live/heartbeat',\r\n        type: 'GET',\r\n        data: params\r\n      }).then(function (res) {\r\n        return resolve(res);\r\n      })[\"catch\"](function (e) {\r\n        return reject(e);\r\n      });\r\n    });\r\n  }; // 获取live_token\r\n\r\n\r\n  var getLiveToken = function getLiveToken(params) {\r\n    var _store$get5 = store.get('roomInitData'),\r\n        _store$get5$webinar = _store$get5.webinar,\r\n        webinar = _store$get5$webinar === void 0 ? {} : _store$get5$webinar;\r\n\r\n    var defaultParams = {\r\n      webinar_id: webinar.id\r\n    };\r\n    var retParmams = merge.recursive({}, defaultParams, params);\r\n    return new Promise(function (resolve, reject) {\r\n      $fetch({\r\n        url: '/v3/webinars/live/get-live-token',\r\n        type: 'GET',\r\n        data: retParmams\r\n      }).then(function (res) {\r\n        return resolve(res);\r\n      })[\"catch\"](function (e) {\r\n        return reject(e);\r\n      });\r\n    });\r\n  }; // 获取推流地址\r\n\r\n\r\n  var getStreamPushAddress = function getStreamPushAddress(params) {\r\n    var _store$get6 = store.get('roomInitData'),\r\n        _store$get6$webinar = _store$get6.webinar,\r\n        webinar = _store$get6$webinar === void 0 ? {} : _store$get6$webinar;\r\n\r\n    var defaultParams = {\r\n      webinar_id: webinar.id\r\n    };\r\n    var retParmams = merge.recursive({}, defaultParams, params);\r\n    return new Promise(function (resolve, reject) {\r\n      $fetch({\r\n        url: '/v3/webinars/live/get-stream-push-address',\r\n        type: 'GET',\r\n        data: retParmams\r\n      }).then(function (res) {\r\n        return resolve(res);\r\n      })[\"catch\"](function (e) {\r\n        return reject(e);\r\n      });\r\n    });\r\n  };\r\n\r\n  var live = {\r\n    initSendLive: initSendLive,\r\n    initStandardReceiveLive: initStandardReceiveLive,\r\n    initEmbeddedReceiveLive: initEmbeddedReceiveLive,\r\n    initSdkReceiveLive: initSdkReceiveLive,\r\n    startLive: startLive,\r\n    endLive: endLive,\r\n    checkLive: checkLive,\r\n    getChatInitOptions: getChatInitOptions,\r\n    liveHeartBeat: liveHeartBeat,\r\n    getLiveToken: getLiveToken,\r\n    getStreamPushAddress: getStreamPushAddress\r\n  };\r\n\r\n  var RequestApi = function RequestApi() {\r\n    _classCallCheck(this, RequestApi);\r\n\r\n    this.live = live;\r\n  };\r\n\r\n  var requestApi = new RequestApi();\r\n\r\n  var BaseModule = /*#__PURE__*/function () {\r\n    function BaseModule() {\r\n      _classCallCheck(this, BaseModule);\r\n\r\n      _defineProperty(this, \"handlers\", {});\r\n    }\r\n\r\n    _createClass(BaseModule, [{\r\n      key: \"$on\",\r\n      value: // 事件添加方法，参数有事件名和事件方法\r\n      function $on(type, handler) {\r\n        // 首先判断handlers内有没有type事件容器，没有则创建一个新数组容器\r\n        if (!(type in this.handlers)) {\r\n          this.handlers[type] = [];\r\n        } // 将事件存入\r\n\r\n\r\n        this.handlers[type].push(handler);\r\n      } // 触发事件两个参数（事件名，参数）\r\n\r\n    }, {\r\n      key: \"$emit\",\r\n      value: function $emit(type) {\r\n        for (var _len = arguments.length, params = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {\r\n          params[_key - 1] = arguments[_key];\r\n        }\r\n\r\n        // 若没有注册该事件则抛出错误\r\n        if (!(type in this.handlers)) {\r\n          return new Error('未注册该事件');\r\n        } // 便利触发\r\n\r\n\r\n        this.handlers[type].forEach(function (handler) {\r\n          handler.apply(void 0, params);\r\n        });\r\n      } // 事件移除参数（事件名，删除的事件，若无第二个参数则删除该事件的订阅和发布）\r\n\r\n    }, {\r\n      key: \"$off\",\r\n      value: function $off(type, handler) {\r\n        // 无效事件抛出\r\n        if (!(type in this.handlers)) {\r\n          return new Error('无效事件');\r\n        }\r\n\r\n        if (!handler) {\r\n          // 直接移除事件\r\n          delete this.handlers[type];\r\n        } else {\r\n          var idx = this.handlers[type].findIndex(function (ele) {\r\n            return ele === handler;\r\n          }); // 抛出异常事件\r\n\r\n          if (idx === undefined) {\r\n            return new Error('无该绑定事件');\r\n          } // 移除事件\r\n\r\n\r\n          this.handlers[type].splice(idx, 1);\r\n\r\n          if (this.handlers[type].length === 0) {\r\n            delete this.handlers[type];\r\n          }\r\n        }\r\n      }\r\n    }]);\r\n\r\n    return BaseModule;\r\n  }();\r\n\r\n  var ChatModule = /*#__PURE__*/function (_BaseModule) {\r\n    _inherits(ChatModule, _BaseModule);\r\n\r\n    var _super = _createSuper(ChatModule);\r\n\r\n    function ChatModule() {\r\n      _classCallCheck(this, ChatModule);\r\n\r\n      return _super.call(this);\r\n    }\r\n    /**\r\n     * 初始化聊天 SDK\r\n     * @param {Object} customOptions 用户自定义参数\r\n     */\r\n\r\n\r\n    _createClass(ChatModule, [{\r\n      key: \"init\",\r\n      value: function init() {\r\n        var _this = this;\r\n\r\n        var customOptions = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\r\n        var defaultOptions = this.initDefaultOptions();\r\n        var options = merge.recursive({}, defaultOptions, customOptions);\r\n        return new Promise(function (resolve, reject) {\r\n          VhallChat.createInstance(options, function (event) {\r\n            _this.instance = event.message;\r\n\r\n            _this.listenEvents();\r\n\r\n            resolve(event);\r\n          }, reject);\r\n        });\r\n      }\r\n      /**\r\n       * 销毁聊天实例\r\n       */\r\n\r\n    }, {\r\n      key: \"destroy\",\r\n      value: function destroy() {\r\n        this.instance.destroy();\r\n        this.instance = null;\r\n      }\r\n      /**\r\n       * 获取实例化聊天的默认参数\r\n       * @returns {Object} defaultOptions 默认参数\r\n       */\r\n\r\n    }, {\r\n      key: \"initDefaultOptions\",\r\n      value: function initDefaultOptions() {\r\n        var isPcClient = isPc();\r\n\r\n        var _store$get = store.get('roomInitData'),\r\n            paasInfo = _store$get.paasInfo,\r\n            userInfo = _store$get.userInfo;\r\n\r\n        var defaultContext = {\r\n          nick_name: userInfo.nickname,\r\n          avatar: userInfo.avatar,\r\n          role_name: userInfo.role_name,\r\n          device_type: isPcClient ? '2' : '1',\r\n          // 设备类型 1手机端 2PC 0未检测\r\n          device_status: '0',\r\n          // 设备状态  0未检测 1可以上麦 2不可以上麦\r\n          is_banned: userInfo.is_gag,\r\n          // 是否禁言 1是 0否\r\n          watch_type: isPcClient ? '1' : '2',\r\n          // 1 pc  2 h5  3 app  4 是客户端\r\n          is_kick: userInfo.is_kick\r\n        };\r\n        var defaultOptions = {\r\n          context: defaultContext,\r\n          appId: paasInfo.paas_app_id,\r\n          accountId: userInfo.third_party_user_id,\r\n          channelId: paasInfo.channel_id,\r\n          token: paasInfo.paas_access_token,\r\n          hide: false // 是否隐身\r\n\r\n        };\r\n        return defaultOptions;\r\n      }\r\n      /**\r\n       * 注册聊天事件\r\n       */\r\n\r\n    }, {\r\n      key: \"listenEvents\",\r\n      value: function listenEvents() {\r\n        var _this2 = this;\r\n\r\n        this.instance.onRoomMsg(function (msg) {\r\n          // 房间消息（不对外）\r\n          _this2.$emit('ROOM_MSG', msg);\r\n        });\r\n        this.instance.onChat(function (msg) {\r\n          // 聊天消息\r\n          _this2.$emit('CHAT', msg);\r\n        });\r\n        this.instance.onCustomMsg(function (msg) {\r\n          // 自定义消息\r\n          _this2.$emit('CUSTOM_MSG', msg);\r\n        });\r\n        this.instance.onOffLine(function () {\r\n          // 连接断开\r\n          _this2.$emit('OFFLINE');\r\n        });\r\n        this.instance.onOnLine(function () {\r\n          // 连接连接上了\r\n          _this2.$emit('ONLINE');\r\n        });\r\n        this.instance.onDocMsg(function (msg) {\r\n          // 文档消息（不对外）\r\n          _this2.$emit('DOC_MSG');\r\n        });\r\n        this.instance.join(function (msg) {\r\n          // 用户加入\r\n          _this2.$emit('JOIN', msg);\r\n        });\r\n        this.instance.leave(function (msg) {\r\n          // 用户离开\r\n          _this2.$emit('LEFT', msg);\r\n        });\r\n      }\r\n      /**\r\n       * 发送聊天消息\r\n       * @param {String} data 消息体\r\n       * @returns {Promise}\r\n       */\r\n\r\n    }, {\r\n      key: \"emitTextChat\",\r\n      value: function emitTextChat(data) {\r\n        var _this3 = this;\r\n\r\n        return new Promise(function (resolve, reject) {\r\n          _this3.instance.emitChat(data, resolve, reject);\r\n        });\r\n      }\r\n      /**\r\n       * 发送自定义消息\r\n       * @param {String} data 消息体\r\n       * @returns {Promise}\r\n       */\r\n\r\n    }, {\r\n      key: \"emitCustomChat\",\r\n      value: function emitCustomChat(data) {\r\n        return this.instance.emitCustomMsg(data);\r\n      }\r\n      /**\r\n       * 发送文档消息（不对外）\r\n       * @param {Object} data 消息体\r\n       * @returns {Promise}\r\n       */\r\n\r\n    }, {\r\n      key: \"emitDocMsg\",\r\n      value: function emitDocMsg(data) {\r\n        return this.instance.emitDocMsg(data);\r\n      }\r\n      /**\r\n       * 发送房间消息（不对外）\r\n       * @param {Object} data 消息体\r\n       * @returns {Promise}\r\n       */\r\n\r\n    }, {\r\n      key: \"emitRoomMsg\",\r\n      value: function emitRoomMsg(data) {\r\n        var retData = JSON.stringify(data);\r\n        return this.instance.emitRoomMsg(retData);\r\n      }\r\n      /**\r\n       * 获取用户列表信息\r\n       * @param {Object} params 分页参数\r\n       * @returns {Promise}\r\n       */\r\n\r\n    }, {\r\n      key: \"getUserListInfo\",\r\n      value: function getUserListInfo(params) {\r\n        var _this4 = this;\r\n\r\n        var defaultParams = {\r\n          currPage: 1,\r\n          pageSize: 10\r\n        };\r\n        var retParams = merge.recursive({}, defaultParams, params);\r\n        return new Promise(function (resolve, reject) {\r\n          _this4.instance.getUserListInfo(retParams, resolve, reject);\r\n        });\r\n      }\r\n      /**\r\n       * 禁言某个用户\r\n       * @param {Object} accountId 用户 id \r\n       * @returns {Promise}\r\n       */\r\n\r\n    }, {\r\n      key: \"setUserDisable\",\r\n      value: function setUserDisable(accountId) {\r\n        return new Peomise(function (resolve, reject) {\r\n          var param = {\r\n            type: VhallChat.TYPE_DISABLE,\r\n            targetId: accountId\r\n          };\r\n          chat.setDisable(param, resolve, reject);\r\n        });\r\n      }\r\n      /**\r\n       * 取消禁言某个用户\r\n       * @param {Object} accountId 用户 id \r\n       * @returns {Promise}\r\n       */\r\n\r\n    }, {\r\n      key: \"setUserPermit\",\r\n      value: function setUserPermit(accountId) {\r\n        return new Peomise(function (resolve, reject) {\r\n          var param = {\r\n            type: VhallChat.TYPE_PERMIT,\r\n            targetId: accountId\r\n          };\r\n          chat.setDisable(param, resolve, reject);\r\n        });\r\n      }\r\n      /**\r\n       * 禁言频道\r\n       * @returns {Promise}\r\n       */\r\n\r\n    }, {\r\n      key: \"setChannelDisable\",\r\n      value: function setChannelDisable() {\r\n        return new Peomise(function (resolve, reject) {\r\n          var param = {\r\n            type: VhallChat.TYPE_DISABLE_ALL\r\n          };\r\n          chat.setDisable(param, resolve, reject);\r\n        });\r\n      }\r\n      /**\r\n       * 取消禁言频道\r\n       * @returns {Promise}\r\n       */\r\n\r\n    }, {\r\n      key: \"setChannelPermit\",\r\n      value: function setChannelPermit() {\r\n        return new Peomise(function (resolve, reject) {\r\n          var param = {\r\n            type: VhallChat.TYPE_PERMIT_ALL\r\n          };\r\n          chat.setDisable(param, resolve, reject);\r\n        });\r\n      }\r\n      /**\r\n       * 获取历史聊天消息\r\n       * @returns {Promise}\r\n       */\r\n\r\n    }, {\r\n      key: \"getHistoryList\",\r\n      value: function getHistoryList(params) {\r\n        var _this5 = this;\r\n\r\n        var defaultParams = {\r\n          currPage: 1,\r\n          pageSize: 200\r\n        };\r\n        var retParams = merge.recursive({}, defaultParams, params);\r\n        return new Promise(function (resolve, reject) {\r\n          _this5.instance.getHistoryList(retParams, resolve, reject);\r\n        });\r\n      }\r\n      /**\r\n       * 获取房间在线信息\r\n       * @param {Object} params 分页参数\r\n       * @returns {Promise}\r\n       */\r\n\r\n    }, {\r\n      key: \"getOnlineInfo\",\r\n      value: function getOnlineInfo(params) {\r\n        var _this6 = this;\r\n\r\n        var defaultParams = {\r\n          currPage: 1,\r\n          pageSize: 200\r\n        };\r\n        var retParams = merge.recursive({}, defaultParams, params);\r\n        return new Promise(function (resolve, reject) {\r\n          _this6.instance.getOnlineInfo(retParams, resolve, reject);\r\n        });\r\n      }\r\n    }]);\r\n\r\n    return ChatModule;\r\n  }(BaseModule);\r\n\r\n  var DocModule = /*#__PURE__*/function (_BaseModule) {\r\n    _inherits(DocModule, _BaseModule);\r\n\r\n    _createSuper(DocModule);\r\n\r\n    function DocModule() {\r\n      var _this;\r\n\r\n      _classCallCheck(this, DocModule);\r\n\r\n      _this.instance = null;\r\n      _this.children = [];\r\n      return _possibleConstructorReturn(_this);\r\n    }\r\n\r\n    _createClass(DocModule, [{\r\n      key: \"init\",\r\n      value: function init() {\r\n        var _this2 = this;\r\n\r\n        var customOptions = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\r\n        var defaultOptions = this.initDefaultOptions();\r\n        var options = merge.recursive({}, defaultOptions, customOptions);\r\n\r\n        var onSuccess = function onSuccess() {\r\n          console.log('saasSDK文档初始化成功');\r\n\r\n          _this2.$emit(CONST_VAL.DOC_SDK_READ, _this2.instance);\r\n        };\r\n\r\n        var onFail = function onFail() {\r\n          console.error('saasSDK文档初始化失败', failed.msg);\r\n\r\n          _this2.$emit(CONST_VAL.DOC_SDK_ERROR, failed.msg);\r\n        };\r\n\r\n        this.instance = VHDocSDK.createInstance(options, onSuccess, onFail);\r\n        this.listenEvents();\r\n      }\r\n    }, {\r\n      key: \"initDefaultOptions\",\r\n      value: function initDefaultOptions() {\r\n        isPc();\r\n\r\n        var _store$get = store.get('roomInitData'),\r\n            paasInfo = _store$get.paasInfo,\r\n            userInfo = _store$get.userInfo;\r\n\r\n        var defaultOptions = {\r\n          accountId: userInfo.third_party_user_id,\r\n          roomId: paasInfo.room_id,\r\n          channelId: paasInfo.channel_id,\r\n          // 频道id 必须\r\n          appId: paasInfo.paas_app_id,\r\n          // appId 必须\r\n          role: userInfo.role_name,\r\n          // 角色 必须\r\n          isVod: false,\r\n          // 是否是回放 必须\r\n          client: window.VHDocSDK.Client.PC_WEB,\r\n          // 客户端类型\r\n          token: this.token\r\n        };\r\n        return defaultOptions;\r\n      }\r\n    }, {\r\n      key: \"listenEvents\",\r\n      value: function listenEvents() {\r\n        var _this3 = this;\r\n\r\n        // 创建容器事件\r\n        this.instance.on(VHDocSDK.Event.CREATE_CONTAINER, function (data) {}); // 选择容器\r\n\r\n        this.instance.on(VHDocSDK.Event.SELECT_CONTAINER, function (data) {}); // 当前文档加载完成\r\n\r\n        this.instance.on(VHDocSDK.Event.DOCUMENT_LOAD_COMPLETE, function (data) {}); // 开关变换\r\n\r\n        this.instance.on(VHDocSDK.Event.SWITCH_CHANGE, function (status) {\r\n          _this3.$emit('SWITCH_CHANGE', status);\r\n        }); // 删除容器时候触发的事件\r\n\r\n        this.instance.on(VHDocSDK.Event.DELETE_CONTAINER, function (data) {\r\n          _this3.$emit('DELETE_CONTAINER');\r\n        }); // 所有的文档准备完成\r\n\r\n        this.instance.on(VHDocSDK.Event.ALL_COMPLETE, function () {\r\n          _this3.$emit('ALL_COMPLETE');\r\n        }); // 正在演示的文档被删除(文档不存在)\r\n\r\n        this.instance.on(VHDocSDK.Event.DOCUMENT_NOT_EXIT, function (_ref) {\r\n          var cid = _ref.cid,\r\n              docId = _ref.docId;\r\n\r\n          _this3.$emit('DOCUMENT_NOT_EXIT', {\r\n            cid: cid,\r\n            docId: docId\r\n          });\r\n        }); // 翻页事件\r\n\r\n        this.instance.on(VHDocSDK.Event.PAGE_CHANGE, function (event) {\r\n          _this3.$emit('PAGE_CHANGE\b', event);\r\n        }); // 回放文件加载完成\r\n\r\n        this.instance.on(VHDocSDK.Event.VOD_CUEPOINT_LOAD_COMPLETE, function (event) {\r\n          _this3.$emit('VOD_CUEPOINT_LOAD_COMPLETE', event);\r\n        }); // ppt文档加载完毕\r\n\r\n        this.instance.on(VHDocSDK.Event.PLAYBACKCOMPLETE, function (event) {\r\n          _this3.$emit('PLAYBACKCOMPLETE', event);\r\n        });\r\n      }\r\n    }, {\r\n      key: \"destroy\",\r\n      value: function destroy() {\r\n        if (!this.instance) return;\r\n        this.instance.destroy();\r\n        this.instance = null;\r\n      }\r\n    }, {\r\n      key: \"createBoard\",\r\n      value: function createBoard(customOptions) {\r\n        var elId = this.instance.createUUID('board');\r\n        var defaultOptions = {\r\n          elId: elId,\r\n          // div 容器 必须\r\n          width: 200,\r\n          // div 宽度，像素单位，数值型不带px 必须\r\n          height: 200,\r\n          // div 高度，像素单位，数值型不带px 必须\r\n          backgroundColor: 'RGBA',\r\n          // 背景颜色， 支持RGB 与 RGBA， 如果全透明，舞台背景色与网页背景色相同，如 ‘#FF0000’或 ‘#FF000000’ 必须\r\n          noDispatch: false,\r\n          // 非必填，默认false，是否推送消息到远端，false为推送，true为不推送，加载远程文档时该字段应为true\r\n          option: {\r\n            // 非必填，画笔预设选项\r\n            graphicType: VHDocSDK.GRAPHIC.PEN,\r\n            // 选项请参考画笔预设值,\r\n            stroke: '#000',\r\n            // 颜色值\r\n            strokeWidth: 4 // 正数 Number\r\n\r\n          }\r\n        };\r\n        var options = merge.recursive({}, defaultOptions, customOptions);\r\n        this.instance.createBoard(options);\r\n      }\r\n    }, {\r\n      key: \"creatDocument\",\r\n      value: function creatDocument(customOptions) {\r\n        var _defaultOptions;\r\n\r\n        var elId = sdk.createUUID('document'); // 容器id，必须用此方法创建，文档传入document，返回唯一id\r\n\r\n        var defaultOptions = (_defaultOptions = {\r\n          id: customOptions.id,\r\n          docId: customOptions.docId,\r\n          elId: elId,\r\n          // div 容器 必须\r\n          width: 200,\r\n          // div 宽度，像素单位，数值型不带px 必须\r\n          height: 200\r\n        }, _defineProperty(_defaultOptions, \"docId\", 'yyy'), _defineProperty(_defaultOptions, \"noDispatch\", false), _defineProperty(_defaultOptions, \"option\", {\r\n          // 非必填，画笔预设选项\r\n          graphicType: VHDocSDK.GRAPHIC.PEN,\r\n          // 选项请参考画笔预设值,\r\n          stroke: '#000',\r\n          // 颜色值\r\n          strokeWidth: 4 // 正数 Number\r\n\r\n        }), _defaultOptions);\r\n        merge.recursive({}, defaultOptions, customOptions);\r\n        sdk.createDocument(opts); // 返回promise\r\n      }\r\n    }, {\r\n      key: \"selectContainer\",\r\n      value: function selectContainer(id) {\r\n        this.instance.selectContainer({\r\n          id: id\r\n        });\r\n        this.currentCid = id;\r\n      }\r\n      /**\r\n       * \r\n       * @param {*} child is cid-ret\r\n       */\r\n\r\n    }, {\r\n      key: \"addChild\",\r\n      value: function addChild(child) {\r\n        this.children.push(child);\r\n      }\r\n    }, {\r\n      key: \"zoomIn\",\r\n      value: function zoomIn() {\r\n        this.instance.zoomIn();\r\n      }\r\n    }, {\r\n      key: \"zoomOut\",\r\n      value: function zoomOut() {\r\n        this.instance.zoomOut();\r\n      }\r\n    }, {\r\n      key: \"zoomReset\",\r\n      value: function zoomReset() {\r\n        this.instance.zoomReset();\r\n      }\r\n    }, {\r\n      key: \"move\",\r\n      value: function move() {\r\n        this.instance.move();\r\n      }\r\n    }, {\r\n      key: \"prevStep\",\r\n      value: function prevStep() {\r\n        this.instance.prevStep();\r\n      }\r\n    }, {\r\n      key: \"nextStep\",\r\n      value: function nextStep() {\r\n        this.instance.nextStep();\r\n      }\r\n    }]);\r\n\r\n    return DocModule;\r\n  }(BaseModule);\r\n\r\n  var InteractiveModule = /*#__PURE__*/function (_BaseModule) {\r\n    _inherits(InteractiveModule, _BaseModule);\r\n\r\n    var _super = _createSuper(InteractiveModule);\r\n\r\n    function InteractiveModule(customOptions) {\r\n      var _this;\r\n\r\n      _classCallCheck(this, InteractiveModule);\r\n\r\n      _this = _super.call(this, customOptions);\r\n\r\n      _this.init(customOptions);\r\n\r\n      return _this;\r\n    }\r\n    /**\r\n     * 初始化互动sdk\r\n     * @param {Object} customOptions \r\n     * @param {*} successCb \r\n     * @param {*} failCb \r\n     * \r\n     */\r\n\r\n\r\n    _createClass(InteractiveModule, [{\r\n      key: \"init\",\r\n      value: function init() {\r\n        var _this2 = this;\r\n\r\n        var customOptions = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\r\n        var successCb = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : function () {};\r\n        var failCb = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : function () {};\r\n        console.log('customoptions', customOptions);\r\n        console.log('store', store);\r\n        var defaultOptions = {\r\n          appId: store.get('roomInitData').paasInfo.paas_app_id,\r\n          // 互动应用ID，必填\r\n          inavId: store.get('roomInitData').paasInfo.inav_id,\r\n          // 互动房间ID，必填\r\n          roomId: store.get('roomInitData').paasInfo.room_id,\r\n          // 如需开启旁路，必填。\r\n          accountId: store.get('roomInitData').userInfo.third_party_user_id,\r\n          // 第三方用户ID，必填\r\n          token: store.get('roomInitData').paasInfo.paas_access_token,\r\n          // access_token，必填\r\n          mode: VhallRTC.MODE_RTC,\r\n          //应用场景模式，选填，可选值参考下文【应用场景类型】。支持版本：2.3.1及以上。\r\n          role: VhallRTC.ROLE_HOST,\r\n          //用户角色，选填，可选值参考下文【互动参会角色】。当mode为rtc模式时，不需要配置role。支持版本：2.3.1及以上。\r\n          attributes: '',\r\n          // String 类型\r\n          autoStartBroadcast: store.get('roomInitData').userInfo.role_name == 1,\r\n          // 是否开启自动旁路 Boolean 类型   主持人默认开启true v2.3.5版本以上可用\r\n          broadcastConfig: store.get('roomInitData').userInfo.role_name == 1 ? {\r\n            layout: customOptions.layout || VhallRTC.CANVAS_LAYOUT_PATTERN_FLOAT_6_5D,\r\n            // 旁路布局，选填 默认大屏铺满，一行5个悬浮于下面\r\n            profile: customOptions.profile || VhallRTC.BROADCAST_VIDEO_PROFILE_1080P_1,\r\n            // 旁路直播视频质量参数\r\n            paneAspectRatio: VhallRTC.BROADCAST_PANE_ASPACT_RATIO_16_9,\r\n            //旁路混流窗格指定高宽比。  v2.3.2及以上\r\n            border: customOptions.border || {\r\n              // 旁路边框属性\r\n              width: 2,\r\n              color: '0x666666'\r\n            }\r\n          } : {} // 自动旁路   开启旁路直播方法所需参数\r\n\r\n        };\r\n        var options = merge.recursive({}, defaultOptions, customOptions);\r\n        console.log(\"optionssssssssssssssssssssssssssss\", options);\r\n        return new Promise(function (resolve, reject) {\r\n          var onSuccess = function onSuccess(event) {\r\n            _this2.instance = event.vhallrtc;\r\n\r\n            _this2.listenEvents();\r\n\r\n            console.log('init interactive sdk success:', event);\r\n            successCb(event);\r\n            resolve(event);\r\n          };\r\n\r\n          var onFail = function onFail(event) {\r\n            console.log('fail:', event);\r\n            failCb(event);\r\n            reject(event);\r\n          };\r\n\r\n          VhallRTC.createInstance(options, onSuccess, onFail);\r\n        });\r\n      }\r\n    }, {\r\n      key: \"listenEvents\",\r\n      value: function listenEvents() {\r\n        var _this3 = this;\r\n\r\n        this.instance.on(VhallRTC.EVENT_REMOTESTREAM_ADD, function (e) {\r\n          // 远端流加入事件\r\n          _this3.$emit('interactive_REMOTESTREAM_ADD', e);\r\n        });\r\n        this.instance.on(VhallRTC.EVENT_REMOTESTREAM_REMOVED, function (e) {\r\n          // 远端流离开事件\r\n          _this3.$emit('interactive_REMOTESTREAM_REMOVED', e);\r\n        });\r\n        this.instance.on(VhallRTC.EVENT_ROOM_EXCDISCONNECTED, function (e) {\r\n          // 房间信令异常断开事件\r\n          _this3.$emit('interactive_ROOM_EXCDISCONNECTED', e);\r\n        });\r\n        this.instance.on(VhallRTC.EVENT_REMOTESTREAM_MUTE, function (e) {\r\n          // 远端流音视频状态改变事件\r\n          _this3.$emit('interactive_REMOTESTREAM_MUTE', e);\r\n        });\r\n        this.instance.on(VhallRTC.EVENT_REMOTESTREAM_FAILED, function (e) {\r\n          // 本地推流或订阅远端流异常断开事件\r\n          _this3.$emit('interactive_REMOTESTREAM_FAILED', e);\r\n        });\r\n        this.instance.on(VhallRTC.EVENT_STREAM_END, function (e) {\r\n          // 本地流采集停止事件(处理拔出设备和桌面共享停止时)\r\n          _this3.$emit('interactive_STREAM_END', e);\r\n        });\r\n        this.instance.on(VhallRTC.EVENT_STREAM_STUNK, function (e) {\r\n          // 本地流视频发送帧率异常事件\r\n          _this3.$emit('interactive_STREAM_STUNK', e);\r\n        });\r\n        this.instance.on(VhallRTC.EVENT_DEVICE_CHANGE, function (e) {\r\n          // 新增设备或移除设备时触发\r\n          _this3.$emit('interactive_DEVICE_CHANGE', e);\r\n        });\r\n      }\r\n      /**\r\n       * 销毁互动sdk\r\n       * @returns -- 销毁互动sdk\r\n       */\r\n\r\n    }, {\r\n      key: \"destroyInit\",\r\n      value: function destroyInit() {\r\n        var _this4 = this;\r\n\r\n        return new Promise(function (resolve, reject) {\r\n          _this4.instance.destroyInstance({}).then(function () {\r\n            resolve();\r\n            _this4.instance = null;\r\n          })[\"catch\"](function (error) {\r\n            reject(error);\r\n          });\r\n        });\r\n      }\r\n      /**\r\n       * 创建本地流\r\n       * @param obt {Object} - sdk init stream base info config\r\n       * @return {Promise} - 创建成功后的promise 回调\r\n       *\r\n       */\r\n\r\n    }, {\r\n      key: \"createLocalStream\",\r\n      value: function createLocalStream() {\r\n        var _this5 = this;\r\n\r\n        var options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\r\n        return new Promise(function (resolve, reject) {\r\n          _this5.instance.createStream(options).then(function (data) {\r\n            resolve(data.streamId);\r\n          })[\"catch\"](function (error) {\r\n            if (store.get('roomInitData').userInfo.role_name != 1) {\r\n              //上麦人员无法创建本地流上麦，向外抛出信息\r\n              var toSpeakInfo = _objectSpread2({\r\n                roleName: store.get('roomInitData').userInfo.role_name,\r\n                accountId: store.get('roomInitData').userInfo.third_party_user_id,\r\n                nickName: store.get('roomInitData').userInfo.nickname\r\n              }, error);\r\n\r\n              reject(toSpeakInfo);\r\n            } else {\r\n              reject(error);\r\n            }\r\n          });\r\n        });\r\n      }\r\n      /**\r\n       * 创建摄像头视频流\r\n       * @param obt {Object} - sdk init stream base info config  videoNode: 容器 audioDevice: 音频的Id videoDevice:视频的设备Id profile:视频推流的质量\r\n       * @return {Promise} - 创建成功后的promise 回调\r\n       *\r\n       */\r\n\r\n    }, {\r\n      key: \"createLocalVideoStream\",\r\n      value: function createLocalVideoStream() {\r\n        var _this6 = this;\r\n\r\n        var options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\r\n        var addConfig = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\r\n        return new Promise(function (resolve, reject) {\r\n          var defaultOptions = {\r\n            videoNode: options.videoNode,\r\n            // 必填，传入本地视频显示容器ID\r\n            audio: true,\r\n            // 选填，是否采集音频设备，默认为true\r\n            video: true,\r\n            // 选填，是否采集视频设备，默认为true\r\n            audioDevice: options.audioDevice,\r\n            // 选填，指定的音频设备id，默认为系统缺省\r\n            videoDevice: options.videoDevice,\r\n            // 选填，指定的视频设备id，默认为系统缺省\r\n            profile: VhallRTC[options.profile] || VhallRTC.RTC_VIDEO_PROFILE_1080P_16x9_H,\r\n            // 选填，视频质量参数，可选值参考文档中的[互动流视频质量参数表]\r\n            streamType: 2,\r\n            //选填，指定互动流类型，当需要自定义类型时可传值。如未传值，则底层自动判断： 0为纯音频，1为纯视频，2为音视频，3为屏幕共享。\r\n            attributes: JSON.stringify({\r\n              roleName: store.get('roomInitData').userInfo.role_name,\r\n              accountId: store.get('roomInitData').userInfo.third_party_user_id,\r\n              nickName: store.get('roomInitData').userInfo.nickname\r\n            }) //选填，自定义信息，支持字符串类型\r\n\r\n          };\r\n          var params = merge.recursive({}, defaultOptions, addConfig);\r\n          console.log('pass params::', params);\r\n\r\n          _this6.instance.createStream(params).then(function (data) {\r\n            resolve(data.streamId);\r\n          })[\"catch\"](function (error) {\r\n            if (store.get('roomInitData').userInfo.role_name != 1) {\r\n              //上麦人员无法创建本地流上麦，向外抛出信息\r\n              var toSpeakInfo = _objectSpread2({\r\n                roleName: store.get('roomInfo').roleName,\r\n                accountId: store.get('roomInfo').accountId,\r\n                nickName: store.get('roomInfo').nickName\r\n              }, error);\r\n\r\n              reject(toSpeakInfo);\r\n            } else {\r\n              reject(error);\r\n            }\r\n          });\r\n        });\r\n      }\r\n      /**\r\n       * 创建桌面共享流\r\n       * @param obt {Object} - sdk init stream base info config  videoNode: 容器 speaker: 是否采集扬声器 profile: 视频的质量 addConfig: 扩展配置项\r\n       * @return {Promise} - 创建成功后的promise 回调\r\n       *\r\n       */\r\n\r\n    }, {\r\n      key: \"createLocaldesktopStream\",\r\n      value: function createLocaldesktopStream() {\r\n        var _this7 = this;\r\n\r\n        var options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\r\n        var addConfig = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\r\n        return new Promise(function (resolve, reject) {\r\n          var defaultOptions = {\r\n            videoNode: options.videoNode,\r\n            // 必填，传入本地视频显示容器ID\r\n            screen: true,\r\n            speaker: options.speaker || false,\r\n            // 桌面共享时是否分享桌面音频(如为true，则chrome浏览器弹框左下角将显示“分享音频”选框)，默认为false\r\n            profile: options.profile || VhallRTC.RTC_VIDEO_PROFILE_1080P_16x9_H,\r\n            // 选填，视频质量参数，可选值参考文档中的[互动流视频质量参数表]\r\n            streamType: 3,\r\n            //选填，指定互动流类型，当需要自定义类型时可传值。如未传值，则底层自动判断： 0为纯音频，1为纯视频，2为音视频，3为屏幕共享。\r\n            attributes: JSON.stringify({\r\n              roleName: store.get('roomInitData').userInfo.role_name,\r\n              accountId: store.get('roomInitData').userInfo.third_party_user_id,\r\n              nickName: store.get('roomInitData').userInfo.nickname\r\n            }) //选填，自定义信息，支持字符串类型\r\n\r\n          };\r\n          var params = merge.recursive({}, defaultOptions, addConfig);\r\n\r\n          _this7.instance.createStream(params).then(function (data) {\r\n            resolve(data.streamId);\r\n          })[\"catch\"](function (error) {\r\n            if (store.get('roomInitData').userInfo.role_name != 1) {\r\n              //上麦人员无法创建本地流上麦，向外抛出信息\r\n              var toSpeakInfo = _objectSpread2({\r\n                roleName: store.get('roomInitData').userInfo.role_name,\r\n                accountId: store.get('roomInitData').userInfo.third_party_user_id,\r\n                nickName: store.get('roomInitData').userInfo.nickname\r\n              }, error);\r\n\r\n              reject(toSpeakInfo);\r\n            } else {\r\n              reject(error);\r\n            }\r\n          });\r\n        });\r\n      }\r\n      /**\r\n       * 创建本地音频流\r\n       * @param obt {Object} - sdk init stream base info config  videoNode: 容器 audioDevice: 音频Id addConfig: 扩展配置项\r\n       * @return {Promise} - 创建成功后的promise 回调\r\n       *\r\n       */\r\n\r\n    }, {\r\n      key: \"createLocalAudioStream\",\r\n      value: function createLocalAudioStream() {\r\n        var _this8 = this;\r\n\r\n        var options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\r\n        var addConfig = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\r\n        return new Promise(function (resolve, reject) {\r\n          var defaultOptions = {\r\n            videoNode: options.videoNode,\r\n            // 必填，传入本地视频显示容器ID\r\n            audio: true,\r\n            // 选填，是否采集音频设备，默认为true\r\n            video: false,\r\n            // 选填，是否采集视频设备，默认为true\r\n            audioDevice: options.audioDevice,\r\n            // 选填，指定的音频设备id，默认为系统缺省\r\n            showControls: false,\r\n            // 选填，是否开启视频原生控制条，默认为false\r\n            attributes: JSON.stringify({\r\n              account_id: store.get('roomInfo').accountId,\r\n              nick_name: store.get('roomInfo').nickName,\r\n              role_name: store.get('roomInfo').roleName\r\n            }),\r\n            //选填，自定义信息，支持字符串类型\r\n            streamType: 0 //选填，指定互动流类型，当需要自定义类型时可传值。如未传值，则底层自动判断： 0为纯音频，1为纯视频，2为音视频，3为屏幕共享。\r\n\r\n          };\r\n          var params = merge.recursive({}, defaultOptions, addConfig);\r\n\r\n          _this8.instance.createStream(params).then(function (data) {\r\n            resolve(data.streamId);\r\n          })[\"catch\"](function (error) {\r\n            reject(error);\r\n          });\r\n        });\r\n      }\r\n      /**\r\n       * 创建图片推流\r\n       * @param obt {Object} - sdk init stream base info config  videoNode: 容器 videoTrack: MediaStreamTrack对象,采集图像 addConfig: 扩展配置项\r\n       * @return {Promise} - 创建成功后的promise 回调\r\n       *\r\n       */\r\n\r\n    }, {\r\n      key: \"createLocalPhotoStream\",\r\n      value: function createLocalPhotoStream() {\r\n        var _this9 = this;\r\n\r\n        var options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\r\n        var addConfig = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\r\n        return new Promise(function (resolve, reject) {\r\n          var defaultOptions = {\r\n            videoNode: options.videoNode,\r\n            // 传入本地视频显示容器，必填\r\n            audio: true,\r\n            video: true,\r\n            //如参会者没有摄像头，则传入false\r\n            videoTrack: options.videoTrack //MediaStreamTrack对象\r\n\r\n          };\r\n          var params = merge.recursive({}, defaultOptions, addConfig);\r\n\r\n          _this9.instance.createStream(params).then(function (data) {\r\n            resolve(data.streamId);\r\n          })[\"catch\"](function (error) {\r\n            reject(error);\r\n          });\r\n        });\r\n      }\r\n      /**\r\n       * 销毁本地流\r\n       * @param {String} streamId -- 要销毁的流Id\r\n       * @returns \r\n       */\r\n\r\n    }, {\r\n      key: \"destroyStream\",\r\n      value: function destroyStream() {\r\n        var _this10 = this;\r\n\r\n        var streamId = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : '';\r\n        return new Promise(function (resolve, reject) {\r\n          _this10.instance.destroyStream({\r\n            streamId: streamId\r\n          }).then(function () {\r\n            resolve();\r\n          })[\"catch\"](function (error) {\r\n            reject(error);\r\n          });\r\n        });\r\n      }\r\n      /**\r\n       * 推送本地流到远端\r\n       * @param {Object} options publish stream base info config  streamId：要推的流Id，accountId:用户Id\r\n       * @return {Promise} - 推流成功后的promise 回调\r\n       */\r\n\r\n    }, {\r\n      key: \"publishStream\",\r\n      value: function publishStream() {\r\n        var _this11 = this;\r\n\r\n        var options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\r\n        return new Promise(function (resolve, reject) {\r\n          _this11.instance.publish({\r\n            streamId: options.streamId,\r\n            accountId: options.accountId\r\n          }).then(function (data) {\r\n            resolve(data);\r\n          })[\"catch\"](function (errInfo) {\r\n            reject(errInfo);\r\n          });\r\n        });\r\n      }\r\n      /**\r\n       * 取消推送到远端的流\r\n       * @param {String} streamId 要取消推的流Id\r\n       * @returns {Promise} - 取消推流成功后的promise 回调\r\n      */\r\n\r\n    }, {\r\n      key: \"unpublishStream\",\r\n      value: function unpublishStream() {\r\n        var _this12 = this;\r\n\r\n        var streamId = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : '';\r\n        return new Promise(function (resolve, reject) {\r\n          _this12.instance.unpublish({\r\n            streamId: streamId\r\n          }).then(function () {\r\n            resolve();\r\n          })[\"catch\"](function (error) {\r\n            reject(error);\r\n          });\r\n        });\r\n      }\r\n      /**\r\n       * 订阅远端流\r\n       * @param {Object} options -- streamId:订阅的流id videoNode: 页面显示的容器 mute: 远端流的音视频 dual: 大小流 0小流 1大流\r\n       * @returns {Promise} - 订阅成功后的promise 回调\r\n       */\r\n\r\n    }, {\r\n      key: \"subscribeStream\",\r\n      value: function subscribeStream() {\r\n        var _this13 = this;\r\n\r\n        var options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\r\n        return new Promise(function (resolve, reject) {\r\n          var defaultOptions = {\r\n            videoNode: options.videoNode,\r\n            // 传入本地视频显示容器，必填\r\n            streamId: options.streamId,\r\n            mute: {\r\n              // 选填，订阅成功后立即mute远端流\r\n              audio: options.mute.audio || false,\r\n              // 是否关闭音频，默认false\r\n              video: options.mute.audio || false // 是否关闭视频，默认false\r\n\r\n            },\r\n            dual: options.dual || 1 // 双流订阅选项， 0为小流， 1为大流(默认)\r\n\r\n          };\r\n          var params = merge.recursive({}, defaultOptions, addConfig);\r\n\r\n          _this13.instance.subscribe(params).then(function (data) {\r\n            resolve(data);\r\n          })[\"catch\"](function (error) {\r\n            reject(error);\r\n          });\r\n        });\r\n      }\r\n      /**\r\n       * 取消订阅远端流\r\n       * @param {String} streamId -- 要取消订阅的流Id \r\n       * @returns {Promise} - 取消订阅成功后的promise 回调\r\n       */\r\n\r\n    }, {\r\n      key: \"unSubscribeStream\",\r\n      value: function unSubscribeStream() {\r\n        var _this14 = this;\r\n\r\n        var streamId = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : '';\r\n        return new Promise(function (resolve, reject) {\r\n          _this14.instance.unsubscribe({\r\n            streamId: streamId\r\n          }).then(function (data) {\r\n            resolve(data);\r\n          })[\"catch\"](function (error) {\r\n            reject(error);\r\n          });\r\n        });\r\n      }\r\n      /**\r\n       * 设置大小流\r\n       * @param {Object} options streamId: 需要设置的流Id  dual: 0为小流 1为大流\r\n       * @returns {Promise} - 设置订阅大小流成功后的promise回调\r\n       */\r\n\r\n    }, {\r\n      key: \"setDual\",\r\n      value: function setDual() {\r\n        var _this15 = this;\r\n\r\n        var options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\r\n        return new Promise(function (resolve, reject) {\r\n          var params = {\r\n            streamId: options.streamId,\r\n            dual: options.dual\r\n          };\r\n\r\n          _this15.instance.setDual(params).then(function (data) {\r\n            resolve(data);\r\n          })[\"catch\"](function (error) {\r\n            reject(error);\r\n          });\r\n        });\r\n      }\r\n      /**\r\n       * 改变视频的禁用和启用\r\n       * @param {Object} options streamId: 对哪一路流进行操作的流Id  isMute: true为禁用，false为启用\r\n       * @returns {Promise} - 改变视频的禁用与开启后的promise 回调\r\n       */\r\n\r\n    }, {\r\n      key: \"muteVideo\",\r\n      value: function muteVideo() {\r\n        var _this16 = this;\r\n\r\n        var options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\r\n        return new Promise(function (resolve, reject) {\r\n          var params = {\r\n            streamId: options.streamId,\r\n            isMute: options.isMute\r\n          };\r\n\r\n          _this16.instance.muteVideo(params).then(function (data) {\r\n            resolve(data);\r\n          })[\"catch\"](function (error) {\r\n            reject(error);\r\n          });\r\n        });\r\n      }\r\n      /**\r\n       * 改变音频的禁用和启用\r\n       * @param {Object} options streamId: 对哪一路流进行操作的流Id isMute: true为禁用，false为启用\r\n       * @returns {Promise} - 改变音频的禁用与开启后的promise 回调\r\n       */\r\n\r\n    }, {\r\n      key: \"muteAudio\",\r\n      value: function muteAudio() {\r\n        var _this17 = this;\r\n\r\n        var options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\r\n        return new Promise(function (resolve, reject) {\r\n          var params = {\r\n            streamId: options.streamId,\r\n            isMute: options.isMute\r\n          };\r\n\r\n          _this17.instance.muteAudio(params).then(function (data) {\r\n            resolve(data);\r\n          })[\"catch\"](function (error) {\r\n            reject(error);\r\n          });\r\n        });\r\n      }\r\n      /**\r\n       * 开启旁路\r\n       * @param {Object} options --  layout: 旁路布局  profile: 旁路直播视频质量参数 paneAspectRatio:旁路混流窗格指定高宽比 border: 旁路边框属性\r\n       * @returns {Promise} - 开启旁路后的promise回调\r\n       */\r\n\r\n    }, {\r\n      key: \"startBroadCast\",\r\n      value: function startBroadCast() {\r\n        var _this18 = this;\r\n\r\n        var options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\r\n        var addConfig = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\r\n        return new Promise(function (resolve, reject) {\r\n          var defaultOptions = {\r\n            layout: options.layout || VhallRTC.CANVAS_LAYOUT_PATTERN_FLOAT_6_5D,\r\n            // 旁路布局，选填 默认大屏铺满，一行5个悬浮于下面\r\n            profile: options.profile || VhallRTC.BROADCAST_VIDEO_PROFILE_1080P_1,\r\n            // 旁路直播视频质量参数\r\n            paneAspectRatio: VhallRTC.BROADCAST_PANE_ASPACT_RATIO_16_9,\r\n            //旁路混流窗格指定高宽比。  v2.3.2及以上\r\n            border: options.border || {\r\n              // 旁路边框属性\r\n              width: 2,\r\n              color: '0x666666'\r\n            }\r\n          };\r\n          var params = merge.recursive({}, defaultOptions, addConfig);\r\n\r\n          _this18.instance.startBroadCast(params).then(function () {\r\n            resolve();\r\n          })[\"catch\"](function (error) {\r\n            reject(error);\r\n          });\r\n        });\r\n      }\r\n      /**\r\n       * 停止旁路\r\n       * @returns {Promise} - 停止旁路后的promise回调\r\n       */\r\n\r\n    }, {\r\n      key: \"stopBroadCast\",\r\n      value: function stopBroadCast() {\r\n        var _this19 = this;\r\n\r\n        return new Promise(function (resolve, reject) {\r\n          _this19.instance.stopBroadCast().then(function () {\r\n            resolve();\r\n          })[\"catch\"](function (error) {\r\n            reject(error);\r\n          });\r\n        });\r\n      }\r\n      /**\r\n       * 动态配置指定旁路布局模板\r\n       * @param {Object} options --  layout: 指定旁路布局模板\r\n       * @returns {Promise} - 动态配置指定旁路布局模板的promise回调\r\n       */\r\n\r\n    }, {\r\n      key: \"setBroadCastLayout\",\r\n      value: function setBroadCastLayout() {\r\n        var _this20 = this;\r\n\r\n        var options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\r\n        return new Promise(function (resolve, reject) {\r\n          _this20.instance.setBroadCastLayout({\r\n            layout: options.layout || VhallRTC.CANVAS_LAYOUT_PATTERN_FLOAT_6_5D\r\n          }).then(function () {\r\n            resolve();\r\n          })[\"catch\"](function (error) {\r\n            reject(error);\r\n          });\r\n        });\r\n      }\r\n      /**\r\n       * 动态配置旁路主屏\r\n       * @param {String} mainScreenStreamId -- 将哪路流设置成主屏的流Id\r\n       * @returns {Promise} - 动态配置旁路主屏的promise回调\r\n       */\r\n\r\n    }, {\r\n      key: \"setBroadCastScreen\",\r\n      value: function setBroadCastScreen() {\r\n        var _this21 = this;\r\n\r\n        var mainScreenStreamId = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : '';\r\n        return new Promise(function (resolve, reject) {\r\n          _this21.instance.setBroadCastScreen({\r\n            mainScreenStreamId: mainScreenStreamId\r\n          }).then(function () {\r\n            resolve();\r\n          })[\"catch\"](function (error) {\r\n            reject(error);\r\n          });\r\n        });\r\n      }\r\n      /**\r\n       * 获取全部音视频列表\r\n       * @returns {Promise} - 获取全部音视频列表的promise回调\r\n       */\r\n\r\n    }, {\r\n      key: \"getDevices\",\r\n      value: function getDevices() {\r\n        var _this22 = this;\r\n\r\n        return new Promise(function (resolve, reject) {\r\n          _this22.instance.getDevices().then(function (devices) {\r\n            resolve(devices);\r\n          })[\"catch\"](function (error) {\r\n            reject(error);\r\n          });\r\n        });\r\n      }\r\n      /**\r\n       * 获取摄像头列表\r\n       * @returns {Promise} - 获取摄像头列表的promise回调\r\n       */\r\n\r\n    }, {\r\n      key: \"getCameras\",\r\n      value: function getCameras() {\r\n        var _this23 = this;\r\n\r\n        return new Promise(function (resolve, reject) {\r\n          _this23.instance.getCameras().then(function (devices) {\r\n            resolve(devices);\r\n          })[\"catch\"](function (error) {\r\n            reject(error);\r\n          });\r\n        });\r\n      }\r\n      /**\r\n       * 获取麦克风列表\r\n       * @returns {Promise} - 获取麦克风列表的promise回调\r\n       */\r\n\r\n    }, {\r\n      key: \"getMicrophones\",\r\n      value: function getMicrophones() {\r\n        var _this24 = this;\r\n\r\n        return new Promise(function (resolve, reject) {\r\n          _this24.instance.getMicrophones().then(function (devices) {\r\n            resolve(devices);\r\n          })[\"catch\"](function (error) {\r\n            reject(error);\r\n          });\r\n        });\r\n      }\r\n      /**\r\n       * 获取扬声器列表\r\n       * @returns {Promise} - 获取扬声器列表的promise回调\r\n       */\r\n\r\n    }, {\r\n      key: \"getSpeakers\",\r\n      value: function getSpeakers() {\r\n        var _this25 = this;\r\n\r\n        return new Promise(function (resolve, reject) {\r\n          _this25.instance.getSpeakers().then(function (devices) {\r\n            resolve(devices);\r\n          })[\"catch\"](function (error) {\r\n            reject(error);\r\n          });\r\n        });\r\n      }\r\n      /**\r\n       * 获取设备的分辨率\r\n       * @param {String} deviceId -- 摄像头设备的Id\r\n       * @returns {Promise} - 分辨率获取之后的promise回调\r\n       */\r\n\r\n    }, {\r\n      key: \"getVideoConstraints\",\r\n      value: function getVideoConstraints(deviceId) {\r\n        var _this26 = this;\r\n\r\n        return new Promise(function (resolve, reject) {\r\n          _this26.instance.getVideoConstraints({\r\n            deviceId: deviceId\r\n          }, function (data) {\r\n            resolve(data);\r\n          }, function (error) {\r\n            reject(error);\r\n          });\r\n        });\r\n      }\r\n      /**\r\n       * 是否支持桌面共享\r\n       * @returns Boolean\r\n       */\r\n\r\n    }, {\r\n      key: \"isScreenShareSupported\",\r\n      value: function isScreenShareSupported() {\r\n        return this.instance.isScreenShareSupported();\r\n      }\r\n      /**\r\n       * 检查当前浏览器支持性\r\n       * @returns Boolean\r\n       */\r\n\r\n    }, {\r\n      key: \"checkSystemRequirements\",\r\n      value: function checkSystemRequirements() {\r\n        var _this27 = this;\r\n\r\n        return new Promise(function (resolve, reject) {\r\n          _this27.instance.checkSystemRequirements().then(function (data) {\r\n            resolve(data.result);\r\n          })[\"catch\"](function (error) {\r\n            reject(error);\r\n          });\r\n        });\r\n      }\r\n      /**\r\n       * 获取上下行丢包率\r\n       * @returns  data中有 upLossRate 上行丢包率   downLossRate 下行丢包率\r\n       */\r\n\r\n    }, {\r\n      key: \"getPacketLossRate\",\r\n      value: function getPacketLossRate() {\r\n        var _this28 = this;\r\n\r\n        return new Promise(function (resolve, reject) {\r\n          _this28.instance.getPacketLossRate().then(function (data) {\r\n            resolve(data);\r\n          })[\"catch\"](function (error) {\r\n            reject(error);\r\n          });\r\n        });\r\n      }\r\n    }]);\r\n\r\n    return InteractiveModule;\r\n  }(BaseModule);\r\n\r\n  var PlayerModule = /*#__PURE__*/function (_BaseModule) {\r\n    _inherits(PlayerModule, _BaseModule);\r\n\r\n    var _super = _createSuper(PlayerModule);\r\n\r\n    function PlayerModule(customOptions) {\r\n      var _this;\r\n\r\n      _classCallCheck(this, PlayerModule);\r\n\r\n      _this = _super.call(this, customOptions);\r\n\r\n      _this.init(customOptions);\r\n\r\n      _this.isPlaying = false;\r\n      return _this;\r\n    }\r\n\r\n    _createClass(PlayerModule, [{\r\n      key: \"init\",\r\n      value: function init() {\r\n        var customOptions = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\r\n        var successCb = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : function () {};\r\n        var failCb = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : function () {};\r\n\r\n        if (customOptions.type === 'live') {\r\n          this.initLivePlayer(customOptions, successCb, failCb);\r\n        }\r\n\r\n        if (customOptions.type === 'vod') {\r\n          this.initVodPlayer(customOptions, successCb, failCb);\r\n        }\r\n      }\r\n    }, {\r\n      key: \"createInstance\",\r\n      value: function createInstance() {\r\n        var _this2 = this;\r\n\r\n        var customOptions = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\r\n        var successCb = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : function () {};\r\n        var failCb = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : function () {};\r\n\r\n        var _store$get = store.get('roomInitData'),\r\n            paasInfo = _store$get.paasInfo,\r\n            userInfo = _store$get.userInfo;\r\n\r\n        var defaultOptions = {\r\n          appId: paasInfo.paas_app_id,\r\n          accountId: userInfo.third_party_user_id,\r\n          token: paasInfo.paas_access_token,\r\n          type: 'live'\r\n        };\r\n        var options = merge.recursive({}, defaultOptions, customOptions);\r\n        console.log('options:', options);\r\n\r\n        var onSuccess = function onSuccess(event) {\r\n          _this2.instance = event.vhallplayer;\r\n\r\n          _this2.listenEvents();\r\n\r\n          successCb(event);\r\n        };\r\n\r\n        var onFail = function onFail(event) {\r\n          console.log('fail:', event);\r\n          failCb(event);\r\n        };\r\n\r\n        VhallPlayer.createInstance(options, onSuccess, onFail);\r\n      }\r\n    }, {\r\n      key: \"initLivePlayer\",\r\n      value: function initLivePlayer() {\r\n        var customOptions = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\r\n        var successCb = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : function () {};\r\n        var failCb = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : function () {};\r\n\r\n        var _store$get2 = store.get('roomInitData'),\r\n            paasInfo = _store$get2.paasInfo;\r\n            _store$get2.userInfo;\r\n\r\n        var defaultOptions = {\r\n          type: 'live',\r\n          language: 'zh',\r\n          liveOption: {\r\n            roomId: paasInfo.room_id,\r\n            forceMSE: true,\r\n            type: 'flv'\r\n          }\r\n        };\r\n        var options = merge.recursive({}, defaultOptions, customOptions);\r\n        this.createInstance(options, successCb, failCb);\r\n      }\r\n    }, {\r\n      key: \"initVodPlayer\",\r\n      value: function initVodPlayer() {\r\n        var customOptions = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\r\n        var successCb = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : function () {};\r\n        var failCb = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : function () {};\r\n        var defaultOptions = {\r\n          appId: '',\r\n          accountId: '',\r\n          token: '',\r\n          type: 'live',\r\n          vodOption: {\r\n            forceMSE: true,\r\n            recordId: ''\r\n          }\r\n        };\r\n        var options = merge.recursive({}, defaultOptions, customOptions);\r\n        this.createInstance(options, successCb, failCb);\r\n      }\r\n    }, {\r\n      key: \"listenEvents\",\r\n      value: function listenEvents() {\r\n        var _this3 = this;\r\n\r\n        this.instance.on(VhallPlayer.CURRENTTIME_CHANGE, function (e) {\r\n          // 当前时间改变\r\n          _this3.$emit('CURRENTTIME_CHANGE', e);\r\n        });\r\n        this.instance.on(VhallPlayer.TIMEUPDATE, function (e) {\r\n          // 播放时间改变时触发\r\n          _this3.$emit('TIMEUPDATE', e);\r\n        });\r\n        this.instance.on(VhallPlayer.ENDED, function (e) {\r\n          // 播放完毕\r\n          _this3.$emit('ENDED', e);\r\n        });\r\n        this.instance.on(VhallPlayer.ERROR, function (e) {\r\n          // 播放器自身出现错误时触发\r\n          _this3.$emit('ERROR', e);\r\n        });\r\n        this.instance.on(VhallPlayer.LOADED, function (e) {\r\n          // 视频加载完成时触发\r\n          _this3.$emit('LOADED', e);\r\n        });\r\n        this.instance.on(VhallPlayer.PLAY, function (e) {\r\n          // 点播开始播放时触发\r\n          _this3.$emit('PLAY', e);\r\n        });\r\n        this.instance.on(VhallPlayer.PAUSE, function (e) {\r\n          // 点播暂停播放时触发\r\n          _this3.$emit('PAUSE', e);\r\n        });\r\n        this.instance.on(VhallPlayer.LAG_REPORT, function (e) {\r\n          // 视频卡顿时触发\r\n          _this3.$emit('LAG_REPORT', e);\r\n        });\r\n        this.instance.on(VhallPlayer.LAG_RECOVER, function (e) {\r\n          // 视频卡顿恢复时触发\r\n          _this3.$emit('LAG_RECOVER', e);\r\n        });\r\n        this.instance.on(VhallPlayer.FULLSCREEN_CHANGE, function (e) {\r\n          // 全屏状态改变时触发\r\n          _this3.$emit('FULLSCREEN_CHANGE', e);\r\n        });\r\n        this.instance.on(VhallPlayer.MUTE_CHANGE, function (e) {\r\n          // 静音状态被改变时触发\r\n          _this3.$emit('MUTE_CHANGE', e);\r\n        });\r\n        this.instance.on(VhallPlayer.LOOP_CHANGE, function (e) {\r\n          // 点播循环状态被改变时触发\r\n          _this3.$emit('LOOP_CHANGE', e);\r\n        });\r\n        this.instance.on(VhallPlayer.DEFINITION_CHANGE, function (e) {\r\n          // 当前清晰度改变时触发(卡顿时自动切清晰度触发，手动切换不触发)\r\n          _this3.$emit('DEFINITION_CHANGE', e);\r\n        });\r\n      }\r\n    }, {\r\n      key: \"destroy\",\r\n      value: function destroy() {\r\n        this.instance.destroy();\r\n        this.instance = null;\r\n      }\r\n    }, {\r\n      key: \"play\",\r\n      value: function play() {\r\n        return this.instance.play();\r\n      }\r\n    }, {\r\n      key: \"pause\",\r\n      value: function pause() {\r\n        return this.instance.pause();\r\n      }\r\n    }, {\r\n      key: \"isPause\",\r\n      value: function isPause() {\r\n        return this.instance.getIsPause();\r\n      }\r\n    }, {\r\n      key: \"getQualitys\",\r\n      value: function getQualitys() {\r\n        // 获取清晰度列表\r\n        return this.instance.getQualitys();\r\n      }\r\n    }, {\r\n      key: \"getCurrentQuality\",\r\n      value: function getCurrentQuality() {\r\n        // 获取当前视频清晰度\r\n        return this.instance.getCurrentQuality();\r\n      }\r\n    }, {\r\n      key: \"setQuality\",\r\n      value: function setQuality(val, failure) {\r\n        // 设置当前视频清晰度\r\n        return this.instance.setQuality(val, failure);\r\n      }\r\n    }, {\r\n      key: \"enterFullScreen\",\r\n      value: function enterFullScreen(failure) {\r\n        // 进入全屏\r\n        return this.instance.enterFullScreen(failure);\r\n      }\r\n    }, {\r\n      key: \"exitFullScreen\",\r\n      value: function exitFullScreen(failure) {\r\n        // 退出全屏\r\n        return this.instance.exitFullScreen(failure);\r\n      }\r\n    }, {\r\n      key: \"setMute\",\r\n      value: function setMute(isMute, failure) {\r\n        return this.instance.setMute(isMute, failure);\r\n      }\r\n    }, {\r\n      key: \"getVolume\",\r\n      value: function getVolume() {\r\n        // 获取音量\r\n        return this.instance.getVolume();\r\n      }\r\n    }, {\r\n      key: \"setVolume\",\r\n      value: function setVolume(volume, failure) {\r\n        // 设置音量\r\n        return this.instance.setVolume(volume, failure);\r\n      }\r\n    }, {\r\n      key: \"getDuration\",\r\n      value: function getDuration(failure) {\r\n        // 获取当前视频总时长\r\n        return this.instance.getDuration(failure);\r\n      }\r\n    }, {\r\n      key: \"getCurrentTime\",\r\n      value: function getCurrentTime(failure) {\r\n        // 获取当前视频播放时间\r\n        return this.instance.getCurrentTime(failure);\r\n      }\r\n    }, {\r\n      key: \"setCurrentTime\",\r\n      value: function setCurrentTime(time, failure) {\r\n        // 设置当前播放时间\r\n        return this.instance.setCurrentTime(time, failure);\r\n      }\r\n    }, {\r\n      key: \"getUsableSpeed\",\r\n      value: function getUsableSpeed(failure) {\r\n        // 获取当前可选倍速\r\n        return this.instance.getUsableSpeed(failure);\r\n      }\r\n    }, {\r\n      key: \"setPlaySpeed\",\r\n      value: function setPlaySpeed(val, failure) {\r\n        // 设置倍速播放\r\n        return this.instance.setPlaySpeed(val, failure);\r\n      }\r\n    }, {\r\n      key: \"openControls\",\r\n      value: function openControls(isOpen) {\r\n        // 开关默认控制条\r\n        return this.instance.openControls(isOpen);\r\n      }\r\n    }, {\r\n      key: \"openUI\",\r\n      value: function openUI(isOpen) {\r\n        return this.instance.openUI(isOpen);\r\n      }\r\n    }, {\r\n      key: \"setResetVideo\",\r\n      value: function setResetVideo() {\r\n        var videoDom = document.getElementById(this.params.videoNode);\r\n\r\n        if (videoDom && this.instance) {\r\n          this.instance.setSize({\r\n            width: videoDom.offsetWidth,\r\n            height: videoDom.offsetHeight\r\n          });\r\n        }\r\n      }\r\n    }, {\r\n      key: \"setBarrageInfo\",\r\n      value: function setBarrageInfo(option) {\r\n        return this.instance.setBarrageInfo(option, function (err) {\r\n          Vlog.error(err);\r\n        });\r\n      }\r\n    }, {\r\n      key: \"addBarrage\",\r\n      value: function addBarrage(content) {\r\n        return this.instance.addBarrage(content, function (err) {\r\n          Vlog.error(err);\r\n        });\r\n      }\r\n    }, {\r\n      key: \"toggleBarrage\",\r\n      value: function toggleBarrage(open) {\r\n        if (!this.instance) return;\r\n\r\n        if (open) {\r\n          this.instance.openBarrage();\r\n        } else {\r\n          this.instance.closeBarrage();\r\n        }\r\n      }\r\n    }, {\r\n      key: \"toggleSubtitle\",\r\n      value: function toggleSubtitle(open) {\r\n        if (this.instance && this.params.recordId) {\r\n          if (open) {\r\n            // 开启点播字幕(仅点播可用)\r\n            this.instance.openSubtitle();\r\n          } else {\r\n            // 关闭点播字幕(仅点播可用)\r\n            this.instance.closeSubtitle();\r\n          }\r\n        }\r\n      }\r\n    }]);\r\n\r\n    return PlayerModule;\r\n  }(BaseModule);\r\n\r\n  var initLoader = function initLoader() {\r\n    Promise.all([mountSDK('https://static.vhallyun.com/jssdk/vhall-jssdk-player/latest/vhall-jssdk-player-2.3.8.js'), mountSDK('https://static.vhallyun.com/jssdk/vhall-jssdk-chat/latest/vhall-jssdk-chat-2.1.3.js'), mountSDK('https://static.vhallyun.com/jssdk/vhall-jssdk-interaction/latest/vhall-jssdk-interaction-2.3.3.js')]).then(function (res) {\r\n    });\r\n  };\r\n\r\n  var VhallSaasSDK = /*#__PURE__*/function () {\r\n    function VhallSaasSDK() {\r\n      _classCallCheck(this, VhallSaasSDK);\r\n\r\n      this.msgBus = null;\r\n      this.request = requestApi;\r\n      this.baseState = store;\r\n    }\r\n\r\n    _createClass(VhallSaasSDK, [{\r\n      key: \"init\",\r\n      value: function init() {\r\n        var options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {\r\n          clientType: 'send',\r\n          receiveType: 'standard'\r\n        };\r\n        this.setRequestConfig(options);\r\n        this.setClientType(options.clientType);\r\n\r\n        if (options.clientType === 'send') {\r\n          return this.initSendLive(options);\r\n        } else {\r\n          return this.initReceiveLive(options);\r\n        }\r\n      }\r\n    }, {\r\n      key: \"initSendLive\",\r\n      value: function initSendLive(options) {\r\n        var _this = this;\r\n\r\n        return new Promise(function (resolve, reject) {\r\n          _this.request.live.initSendLive(options).then(function (res) {\r\n            if (res.code === 200) {\r\n              store.set('roomInitData', getRoomInfo(res));\r\n              resolve(res);\r\n            } else {\r\n              reject(res);\r\n            }\r\n          });\r\n        });\r\n      }\r\n    }, {\r\n      key: \"initReceiveLive\",\r\n      value: function initReceiveLive(options) {\r\n        var _this2 = this;\r\n\r\n        var receiveApi = {\r\n          standard: 'initStandardReceiveLive',\r\n          embed: 'initEmbeddedReceiveLive',\r\n          sdk: 'initSdkReceiveLive'\r\n        };\r\n        return new Promise(function (resolve, reject) {\r\n          _this2.request.live[receiveApi[options.receiveType]](options).then(function (res) {\r\n            if (res.code === 200) {\r\n              store.set('roomInitData', getRoomInfo(res));\r\n              resolve(res);\r\n            } else {\r\n              reject(res);\r\n            }\r\n          });\r\n        });\r\n      }\r\n    }, {\r\n      key: \"setClientType\",\r\n      value: function setClientType(clientType) {\r\n        if (clientType !== 'send' && clientType !== 'receive') {\r\n          throw new TypeError('clientType is invalid');\r\n        }\r\n\r\n        store.set('clientType', clientType);\r\n      }\r\n    }, {\r\n      key: \"setRequestConfig\",\r\n      value: function setRequestConfig(options) {\r\n        if (options.development) {\r\n          setBaseUrl('https://t-saas-dispatch.vhall.com');\r\n        } else {\r\n          setBaseUrl('https://saas-api.vhall.com');\r\n        }\r\n\r\n        setToken(options.token, options.liveToken);\r\n\r\n        if (options.requestHeaders) {\r\n          setRequestHeaders(options.requestHeaders);\r\n        }\r\n      }\r\n    }, {\r\n      key: \"isReady\",\r\n      value: function isReady() {\r\n        return loadSuccess === true;\r\n      }\r\n    }, {\r\n      key: \"createPlayer\",\r\n      value: function createPlayer() {\r\n        var options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\r\n        return new Promise(function (resolve, reject) {\r\n          var instance = new PlayerModule(options);\r\n          resolve(instance);\r\n        });\r\n      }\r\n    }, {\r\n      key: \"createInteractive\",\r\n      value: function createInteractive() {\r\n        var options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\r\n        return new Promise(function (resolve, reject) {\r\n          var instance = new InteractiveModule(options);\r\n          instance.init(options).then(function (res) {\r\n            resolve(instance);\r\n          });\r\n        });\r\n      }\r\n    }, {\r\n      key: \"createChat\",\r\n      value: function createChat() {\r\n        var options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\r\n        return new Promise(function (resolve, reject) {\r\n          var instance = new ChatModule();\r\n          instance.init(options).then(function (res) {\r\n            resolve(instance);\r\n          });\r\n        });\r\n      }\r\n    }, {\r\n      key: \"createDoc\",\r\n      value: function createDoc() {\r\n        var options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\r\n        return new Promise(function (resolve, reject) {\r\n          var instance = new DocModule(options);\r\n          resolve(instance);\r\n        });\r\n      }\r\n    }]);\r\n\r\n    return VhallSaasSDK;\r\n  }();\r\n\r\n  VhallSaasSDK.requestApi = requestApi;\r\n  initLoader();\r\n\r\n  window.VhallSaasSDK = VhallSaasSDK;\r\n\r\n}));\r\n//# sourceMappingURL=sdk.js.map\r\n","\r\n/**\r\n * ajax请求 jsonp处理\r\n * 1.jsonp 请求格式\r\n *   $fetch({\r\n *      url:'',\r\n *      type: 'GET',\r\n *      jsonp: 'callback',\r\n *      data: {\r\n *        name: 123\r\n *      }\r\n *   })\r\n */\r\nimport { isPc } from './index.js'\r\n\r\n\r\nlet BUSE_URL = ''\r\nlet TOKEN = ''\r\nlet LIVETOKEN = ''\r\nlet HEADERS = {}\r\n\r\n\r\nfunction setBaseUrl(url) {\r\n    BUSE_URL = url\r\n}\r\nfunction setToken(token, livetoken) {\r\n    console.log(token, livetoken, 888)\r\n    TOKEN = token\r\n    LIVETOKEN = livetoken\r\n}\r\nfunction setRequestHeaders(options) {\r\n    HEADERS = {\r\n        ...options\r\n    }\r\n}\r\n\r\nfunction $fetch(options) {\r\n    // if (process.env.NODE_ENV != 'development') {\r\n    //\r\n    // }\r\n    options.url = BUSE_URL + options.url\r\n    console.log('接口环境', options.url)\r\n\r\n    return new Promise((resolve, reject) => {\r\n        options = options || {}\r\n        if (options.data) {\r\n            if (LIVETOKEN) {\r\n                options.data.live_token = LIVETOKEN\r\n            }\r\n            options.data = formatParams(options.data)\r\n        }\r\n        options.dataType ? jsonp(options, resolve, reject) : json(options, resolve, reject)\r\n    })\r\n}\r\n\r\n// JSON请求\r\nfunction json(params, success, fail) {\r\n    let xhr = null\r\n    // interactToken = sessionStorage.getItem('interact-token') || '',\r\n    // grayId = sessionStorage.getItem('grayId') || '',\r\n    // vhallJSSDKUserInfo = localStorage.getItem('vhallJSSDKUserInfo') ? JSON.parse(localStorage.getItem('vhallJSSDKUserInfo')) : {},\r\n    params.type = (params.type || 'GET').toUpperCase()\r\n\r\n    if (window.XMLHttpRequest) {\r\n        xhr = new XMLHttpRequest()\r\n    } else {\r\n        xhr = new ActiveXObject('Microsoft.XMLHTTP')\r\n    }\r\n\r\n    xhr.onreadystatechange = function () {\r\n        if (xhr.readyState == 4) {\r\n            let status = xhr.status\r\n            if (status >= 200 && status < 300) {\r\n                let response = ''\r\n                let type = xhr.getResponseHeader('Content-type')\r\n\r\n                if (type.indexOf('xml') !== -1 && xhr.responseXML) {\r\n                    response = xhr.responseXML\r\n                } else if (type === 'application/json' || type === 'application/json;charset=UTF-8') {\r\n                    response = JSON.parse(xhr.responseText)\r\n\r\n                } else {\r\n                    response = xhr.responseText\r\n                }\r\n                success && success(response)\r\n            } else {\r\n                fail && fail(status)\r\n            }\r\n        }\r\n    }\r\n\r\n    if (params.type == 'GET') {\r\n        if (params.data) {\r\n            xhr.open(params.type, params.url + '?' + params.data, true)\r\n        } else {\r\n            xhr.open(params.type, params.url, true)\r\n        }\r\n    } else if (params.type == 'POST') {\r\n        xhr.open(params.type, params.url, true)\r\n    }\r\n\r\n    xhr.setRequestHeader('Content-Type', 'application/x-www-form-urlencoded')\r\n    if (!LIVETOKEN) {\r\n        TOKEN && xhr.setRequestHeader('token', TOKEN)\r\n    }\r\n    console.log('HEADERS', HEADERS)\r\n    if (HEADERS) {\r\n        Object.getOwnPropertyNames(HEADERS).forEach(item => {\r\n            xhr.setRequestHeader(item, HEADERS[item])\r\n        })\r\n    }\r\n    // if (params.headers && params.headers.activeType == 'new') {\r\n    //     xhr.setRequestHeader('platform', 18)\r\n    //     xhr.setRequestHeader('request-id', uuid())\r\n    //     grayId && xhr.setRequestHeader('gray-id', grayId)\r\n    //     interactToken && xhr.setRequestHeader('interact-token', interactToken)\r\n    //     token && xhr.setRequestHeader('token', token)\r\n    // }\r\n    if (params.type == 'GET') {\r\n        xhr.send(null)\r\n    } else {\r\n        xhr.send(params.data)\r\n    }\r\n}\r\n\r\n// JSONP请求\r\nfunction jsonp(params, success, fail) {\r\n    let callbackName = params.dataType\r\n    params['callback'] = callbackName\r\n\r\n    let script = document.createElement('script')\r\n    script.type = \"text/javascript\"\r\n    script.charset = \"utf-8\"\r\n    document.body.appendChild(script)\r\n\r\n    // 创建回调函数\r\n    window[callbackName] = function (val) {\r\n        document.body.removeChild(script)\r\n        clearTimeout(script.timer)\r\n        window[callbackName] = null\r\n        success && success(val)\r\n    }\r\n    let stemp = random()\r\n    script.src = `${params.url}?${params.data}&_=${1594014089800}`\r\n\r\n    // 超时处理\r\n    if (params.time) {\r\n        script.timer = setTimeout(function () {\r\n            window[callbackName] = null;\r\n            head.removeChild(script);\r\n            fail && fail('请求超时')\r\n        }, parmas.time * 1000);\r\n    }\r\n}\r\n\r\n// 格式化数据\r\nfunction formatParams(data) {\r\n    var arr = []\r\n    if (data) {\r\n        for (let item in data) {\r\n            arr.push(encodeURIComponent(item) + '=' + encodeURIComponent(data[item]))\r\n        }\r\n    }\r\n    return arr.join('&')\r\n}\r\n\r\n// 随机数\r\nfunction random() {\r\n    return Math.floor(Math.random() * 10000 + 500);\r\n}\r\n\r\n\r\nexport default $fetch\r\nexport { setBaseUrl, setToken, setRequestHeaders }\r\n","import $http from '@/utils/http.js'\r\nimport { merge } from '@/utils/index.js'\r\nimport contextServer from \"@/domain/common/context.server.js\"\r\n\r\n// 查询活动基础信息\r\nconst getWebinarInfo = (params = {}) => {\r\n    const { state } = contextServer.get('roomBaseServer')\r\n\r\n    const retParmams = {\r\n      webinar_id: params.webinarId || state.watchInitData.webinar.id,\r\n      is_no_check: 1 || params.is_no_check\r\n    }\r\n\r\n    return $http({\r\n        url: '/v3/webinars/webinar/info',\r\n        type: 'POST',\r\n        data: retParmams\r\n    })\r\n}\r\n\r\n// 查询活动配置信息\r\nconst getConfigList = (params = {}) => {\r\n    const { state } = contextServer.get('roomBaseServer')\r\n\r\n    const retParmams = {\r\n        webinar_id: params.webinar_id || state.watchInitData.webinar.id,\r\n        webinar_user_id: params.webinar_user_id || state.watchInitData.webinar.userinfo.user_id,\r\n        scene_id: params.scene_id || 1\r\n    }\r\n\r\n    return $http({\r\n        url: '/v3/users/permission/get-config-list',\r\n        type: 'POST',\r\n        data: retParmams\r\n    })\r\n}\r\n\r\n// 设置设备检测状态\r\nconst setDevice = (params = {}) => {\r\n  const { state } = contextServer.get('roomBaseServer')\r\n\r\n  const retParmams = {\r\n      room_id: params.room_id || state.watchInitData.interact.room_id,\r\n      status: params.status || 1,\r\n      type: params.type || 0\r\n  }\r\n\r\n  return $http({\r\n      url: '/v3/interacts/room/set-device',\r\n      type: 'POST',\r\n      data: retParmams\r\n  })\r\n}\r\n\r\nconst roomBase = {\r\n    getWebinarInfo,\r\n    getConfigList,\r\n    setDevice\r\n}\r\n\r\nexport default roomBase","\r\n/**\r\n * ajax请求 jsonp处理\r\n * 1.jsonp 请求格式\r\n *   $fetch({\r\n *      url:'',\r\n *      type: 'GET',\r\n *      jsonp: 'callback',\r\n *      data: {\r\n *        name: 123\r\n *      }\r\n *   })\r\n */\r\nimport { isPc } from './index.js'\r\n\r\n\r\nlet BUSE_URL = ''\r\nlet TOKEN = ''\r\nlet LIVETOKEN = ''\r\nlet HEADERS = {}\r\n\r\n\r\nfunction setBaseUrl(url) {\r\n    BUSE_URL = url\r\n}\r\nfunction setToken(token, livetoken) {\r\n    console.log(token, livetoken, 888)\r\n    TOKEN = token\r\n    LIVETOKEN = livetoken\r\n}\r\nfunction setRequestHeaders(options) {\r\n    HEADERS = {\r\n        ...options\r\n    }\r\n}\r\n\r\nfunction $fetch(options) {\r\n    // if (process.env.NODE_ENV != 'development') {\r\n    //\r\n    // }\r\n    options.url = BUSE_URL + options.url\r\n    console.log('接口环境', options.url)\r\n\r\n    return new Promise((resolve, reject) => {\r\n        options = options || {}\r\n        if (options.data) {\r\n            if (LIVETOKEN) {\r\n                options.data.live_token = LIVETOKEN\r\n            }\r\n            options.data = formatParams(options.data)\r\n        }\r\n        options.dataType ? jsonp(options, resolve, reject) : json(options, resolve, reject)\r\n    })\r\n}\r\n\r\n// JSON请求\r\nfunction json(params, success, fail) {\r\n    let xhr = null\r\n    // interactToken = sessionStorage.getItem('interact-token') || '',\r\n    // grayId = sessionStorage.getItem('grayId') || '',\r\n    // vhallJSSDKUserInfo = localStorage.getItem('vhallJSSDKUserInfo') ? JSON.parse(localStorage.getItem('vhallJSSDKUserInfo')) : {},\r\n    params.type = (params.type || 'GET').toUpperCase()\r\n\r\n    if (window.XMLHttpRequest) {\r\n        xhr = new XMLHttpRequest()\r\n    } else {\r\n        xhr = new ActiveXObject('Microsoft.XMLHTTP')\r\n    }\r\n\r\n    xhr.onreadystatechange = function () {\r\n        if (xhr.readyState == 4) {\r\n            let status = xhr.status\r\n            if (status >= 200 && status < 300) {\r\n                let response = ''\r\n                let type = xhr.getResponseHeader('Content-type')\r\n\r\n                if (type.indexOf('xml') !== -1 && xhr.responseXML) {\r\n                    response = xhr.responseXML\r\n                } else if (type === 'application/json' || type === 'application/json;charset=UTF-8') {\r\n                    response = JSON.parse(xhr.responseText)\r\n\r\n                } else {\r\n                    response = xhr.responseText\r\n                }\r\n                success && success(response)\r\n            } else {\r\n                fail && fail(status)\r\n            }\r\n        }\r\n    }\r\n\r\n    if (params.type == 'GET') {\r\n        if (params.data) {\r\n            xhr.open(params.type, params.url + '?' + params.data, true)\r\n        } else {\r\n            xhr.open(params.type, params.url, true)\r\n        }\r\n    } else if (params.type == 'POST') {\r\n        xhr.open(params.type, params.url, true)\r\n    }\r\n\r\n    xhr.setRequestHeader('Content-Type', 'application/x-www-form-urlencoded')\r\n    if (!LIVETOKEN) {\r\n        TOKEN && xhr.setRequestHeader('token', TOKEN)\r\n    }\r\n    console.log('HEADERS', HEADERS)\r\n    if (HEADERS) {\r\n        Object.getOwnPropertyNames(HEADERS).forEach(item => {\r\n            xhr.setRequestHeader(item, HEADERS[item])\r\n        })\r\n    }\r\n    // if (params.headers && params.headers.activeType == 'new') {\r\n    //     xhr.setRequestHeader('platform', 18)\r\n    //     xhr.setRequestHeader('request-id', uuid())\r\n    //     grayId && xhr.setRequestHeader('gray-id', grayId)\r\n    //     interactToken && xhr.setRequestHeader('interact-token', interactToken)\r\n    //     token && xhr.setRequestHeader('token', token)\r\n    // }\r\n    if (params.type == 'GET') {\r\n        xhr.send(null)\r\n    } else {\r\n        xhr.send(params.data)\r\n    }\r\n}\r\n\r\n// JSONP请求\r\nfunction jsonp(params, success, fail) {\r\n    let callbackName = params.dataType\r\n    params['callback'] = callbackName\r\n\r\n    let script = document.createElement('script')\r\n    script.type = \"text/javascript\"\r\n    script.charset = \"utf-8\"\r\n    document.body.appendChild(script)\r\n\r\n    // 创建回调函数\r\n    window[callbackName] = function (val) {\r\n        document.body.removeChild(script)\r\n        clearTimeout(script.timer)\r\n        window[callbackName] = null\r\n        success && success(val)\r\n    }\r\n    let stemp = random()\r\n    script.src = `${params.url}?${params.data}&_=${1594014089800}`\r\n\r\n    // 超时处理\r\n    if (params.time) {\r\n        script.timer = setTimeout(function () {\r\n            window[callbackName] = null;\r\n            head.removeChild(script);\r\n            fail && fail('请求超时')\r\n        }, parmas.time * 1000);\r\n    }\r\n}\r\n\r\n// 格式化数据\r\nfunction formatParams(data) {\r\n    var arr = []\r\n    if (data) {\r\n        for (let item in data) {\r\n            arr.push(encodeURIComponent(item) + '=' + encodeURIComponent(data[item]))\r\n        }\r\n    }\r\n    return arr.join('&')\r\n}\r\n\r\n// 随机数\r\nfunction random() {\r\n    return Math.floor(Math.random() * 10000 + 500);\r\n}\r\n\r\n\r\nexport default $fetch\r\nexport { setBaseUrl, setToken, setRequestHeaders }\r\n","\r\nfunction useContextServer() {\r\n    const state = {\r\n        serverPool: {}\r\n    }\r\n\r\n    const set = (key, server) => {\r\n        const { serverPool } = state;\r\n        serverPool[key] = server;\r\n    }\r\n\r\n    const get = (key) => {\r\n        const { serverPool } = state;\r\n        return serverPool[key]\r\n    }\r\n\r\n    const show = () => {\r\n        const { serverPool } = state;\r\n        return serverPool\r\n    }\r\n\r\n    return { set, get, show }\r\n}\r\n\r\nconst contextServer = useContextServer()\r\nexport default contextServer;\r\n","import $http from '../utils/http.js'\r\nimport { merge } from '../utils/index.js'\r\nimport contextServer from \"../domain/common/context.server\"\r\n\r\n// 账号登录&&验证码登录\r\nconst loginInfo = (params = {}) => {\r\n    const { state } = contextServer.get('roomBaseServer')\r\n\r\n    const retParmams = params.way == 2 ? {\r\n        way: 2,  // 1=账号密码登录=密码登录|2=手机号验证码登录=验证码登录|3=ssotoken登录\r\n        phone: params.usernames,\r\n        dynamic_code: params.captchas,\r\n        visitor_id: params.visitor_id\r\n    } : {\r\n        way: 1,\r\n        uuid: params.loginKey.uuid,\r\n        account: params.ruleForm.username,\r\n        password: params.retPassword,\r\n        captcha: params.phoneKey,\r\n        visitor_id: params.visitor_id,\r\n        remember: params.remember\r\n    }\r\n\r\n    return $http({\r\n        url: '/v3/users/user-consumer/login',\r\n        type: 'POST',\r\n        data: retParmams\r\n    })\r\n}\r\n\r\n// 第三方授权\r\nconst callbackUserInfo = (params = {}) => {\r\n    const { state } = contextServer.get('roomBaseServer')\r\n\r\n    const retParmams = {\r\n        source: params.source,\r\n        key: params.captchas,\r\n        scene_id: params.visitor_id\r\n    }\r\n\r\n    return $http({\r\n        url: '/v3/users/oauth/callback',\r\n        type: 'POST',\r\n        data: retParmams\r\n    })\r\n}\r\n\r\n// 注册\r\nconst register = (params = {}) => {\r\n    const { state } = contextServer.get('roomBaseServer')\r\n\r\n    const retParmams = { ...params }\r\n\r\n    return $http({\r\n        url: '/v3/users/oauth/callback',\r\n        type: 'POST',\r\n        data: retParmams\r\n    })\r\n}\r\n\r\n// 手机||邮箱验证码\r\nconst codeCheck = (params = {}) => {\r\n    const { state } = contextServer.get('roomBaseServer')\r\n\r\n    const retParmams = { ...params }\r\n\r\n    return $http({\r\n        url: '/v3/users/code-consumer/check',\r\n        type: 'POST',\r\n        data: retParmams\r\n    })\r\n}\r\n\r\n// 密码重置\r\nconst resetPassword = (params = {}) => {\r\n    const { state } = contextServer.get('useRoomInitGroupServer')\r\n\r\n    const retParmams = Object.assign({},params,{\r\n        biz_id: state.biz_id || 2\r\n    })\r\n\r\n    return $http({\r\n        url: '/v3/users/user-consumer/reset-password',\r\n        type: 'POST',\r\n        data: retParmams\r\n    })\r\n}\r\n\r\nconst userBase = {\r\n    loginInfo,\r\n    callbackUserInfo,\r\n    register,\r\n    codeCheck,\r\n    resetPassword,\r\n}\r\n\r\nexport default userBase","import '../libs/sdk.js'\r\nimport roomBase from './roomBase.js'\r\nimport user from './user.js'\r\n\r\nclass RequestApi {\r\n    constructor() {\r\n        this.live = window.VhallSaasSDK.requestApi.live\r\n        this.roomBase = roomBase\r\n        this.user = user\r\n    }\r\n}\r\n\r\nconst requestApi = new RequestApi()\r\nexport default requestApi\r\n","\r\nimport requestApi from '../../request/index.js';\r\nimport contextServer from \"@/domain/common/context.server.js\"\r\n\r\nexport default function useRoomBaseServer() {\r\n    const state = {\r\n        inited:false,\r\n        isLiveOver: false,\r\n        webinarVo: {},\r\n        watchInitData: {},\r\n        watchInitErrorData: undefined,// 默认undefined，如果为其他值将触发特殊逻辑\r\n        configList: {}\r\n    }\r\n\r\n\r\n    // 初始化房间信息,包含发起/观看(嵌入/标品)\r\n    const getWatchInitData = (options) => {\r\n        console.log(contextServer.get('useRoomInitGroupServer'))\r\n        const { state: roomInitGroupServer } = contextServer.get('roomInitGroupServer')\r\n\r\n        console.log('init options:',roomInitGroupServer)\r\n\r\n        return roomInitGroupServer.vhallSaasInstance.init(options).then(res => {\r\n            if (res.code === 200) {\r\n                state.inited = true;\r\n                state.watchInitData = res.data;\r\n            } else {\r\n                state.watchInitErrorData = res;\r\n            }\r\n            return res\r\n        });\r\n    }\r\n\r\n\r\n    // 获取活动信息\r\n    const getWebinarInfo = (data) => {\r\n        return requestApi.roomBase.getWebinarInfo(data).then(res => {\r\n            state.webinarVo = res.data;\r\n            return res;\r\n        })\r\n    }\r\n\r\n    // 获取房间权限配置列表\r\n    const getConfigList = (data) => {\r\n        return requestApi.roomBase.getConfigList(data).then(res => {\r\n            state.configList = JSON.parse(res.data.permissions);\r\n            return res;\r\n        })\r\n    }\r\n\r\n    // 设置设备检测状态\r\n    const setDevice = (data) => {\r\n        return requestApi.roomBase.setDevice(data).then(res => {\r\n            return res;\r\n        })\r\n    }\r\n\r\n    // 开播startLive\r\n    const startLive = (data = {}) => {\r\n        setDevice(data)\r\n        return requestApi.live.startLive(data)\r\n    }\r\n\r\n    // 结束直播\r\n    const endLive = (data) => {\r\n        return requestApi.live.endLive(data)\r\n    }\r\n\r\n    const init = (option) => {\r\n        return getWatchInitData(option)\r\n    }\r\n\r\n\r\n\r\n    return { state, init, getWatchInitData, getWebinarInfo, getConfigList, startLive, endLive, setDevice }\r\n\r\n}\r\n","import requestApi from '../../request/index';\r\nimport '../../libs/sdk.js'\r\n\r\nexport default function useUserServer() {\r\n    const state = {}\r\n\r\n    // 验证码登录&&账号登录\r\n    const loginInfo = (data) => {\r\n        return requestApi.user.loginInfo(data)\r\n    }\r\n\r\n    // 第三方授权\r\n    const callbackUserInfo = (data) => {\r\n        return requestApi.user.callbackUserInfo(data)\r\n    }\r\n\r\n    // 注册\r\n    const register = (data) => {\r\n        return requestApi.user.register(data)\r\n    }\r\n\r\n    // 手机||邮箱验证码\r\n    const codeCheck = (data) => {\r\n        return requestApi.user.codeCheck(data)\r\n    }\r\n\r\n    // 密码重置\r\n    const resetPassword = (data) => {\r\n        return requestApi.user.resetPassword(data)\r\n    }\r\n\r\n    return { state, loginInfo, callbackUserInfo, register, codeCheck, resetPassword }\r\n}","import contextServer from '@/domain/common/context.server.js'\r\nimport useMsgServer from '@/domain/common/msg.server.js'\r\nimport useRoomBaseServer from '@/domain/roombase/roombase.server.js'\r\nimport useInteractiveServer from '@/domain/stream/interactive.server.js';\r\nimport { setBaseUrl, setToken, setRequestHeaders } from '@/utils/http.js';\r\n\r\nexport default function useRoomInitGroupServer(options = {}) {\r\n    const state = {\r\n        bizId: options.biz_id || 2,// 区分 端（知客/直播） 2-直播 4-知客\r\n        vhallSaasInstance: null\r\n    }\r\n\r\n    let roomBaseServer = useRoomBaseServer();\r\n    let msgServer = useMsgServer();\r\n    let interactiveServer = useInteractiveServer()\r\n\r\n    contextServer.set('roomBaseServer', roomBaseServer)\r\n    contextServer.set('msgServer', msgServer)\r\n    contextServer.set('interactiveServer',interactiveServer)\r\n\r\n    const reload = async () => {\r\n        msgServer.destroy();\r\n        await msgServer.init();\r\n    }\r\n\r\n    const setRequestConfig = (options) => {\r\n        if (options.development) {\r\n            setBaseUrl('https://t-saas-dispatch.vhall.com')\r\n        } else {\r\n            setBaseUrl('https://saas-api.vhall.com')\r\n        }\r\n\r\n        setToken(options.token, options.liveToken)\r\n\r\n        if (options.requestHeaders) {\r\n            setRequestHeaders(options.requestHeaders)\r\n        }\r\n    }\r\n\r\n    const initSdk = () => {\r\n        return new Promise((resolve,reject)=>{\r\n            state.vhallSaasInstance = new window.VhallSaasSDK()\r\n            addToContext()\r\n            resolve()\r\n        })\r\n    }\r\n\r\n    const initSendLive = async (customOptions = {}) => {\r\n        await initSdk()\r\n        const defaultOptions = {\r\n            clientType: 'send',\r\n            development: true,\r\n            requestHeaders: {\r\n                platform: 7\r\n            }\r\n        }\r\n        const options = Object.assign({}, defaultOptions, customOptions)\r\n        setRequestConfig(options)\r\n\r\n        await roomBaseServer.init(options);\r\n        await roomBaseServer.getWebinarInfo();\r\n        await roomBaseServer.getConfigList();\r\n        await msgServer.init();\r\n        await interactiveServer.init();\r\n\r\n        return true;\r\n    }\r\n\r\n    const initReceiveLive = async (customOptions = {}) => {\r\n        initSdk()\r\n        const defaultOptions = {\r\n            clientType: 'receive',\r\n            development: true,\r\n            requestHeaders: {\r\n                platform: 7\r\n            },\r\n            receiveType: 'standard'\r\n        }\r\n        const options = Object.assign({}, defaultOptions, customOptions)\r\n        setRequestConfig(options)\r\n\r\n        await roomBaseServer.init(options)\r\n        await roomBaseServer.getWebinarInfo()\r\n        await roomBaseServer.getConfigList()\r\n        await msgServer.init();\r\n        await interactiveServer.init();\r\n        \r\n        return true;\r\n    }\r\n\r\n    const result = { state,roomBaseServer, msgServer,interactiveServer,reload, initSendLive, initReceiveLive }\r\n\r\n    function addToContext() {\r\n        contextServer.set('roomInitGroupServer', result)\r\n    }\r\n\r\n    return result;\r\n}\r\n"],"names":["useContextServer","state","set","key","server","get","show","contextServer","useMsgServer","msgInstance","init","vhallSaasInstance","createChat","then","res","destroy","$on","eventType","fn","$emit","params","useInteractiveServer","createLocalAndPushStream","interactive","camerasList","micropsList","videoConstraintsList","streamId","getDevices","data","console","log","videoInputDevices","filter","d","label","deviceId","audioInputDevices","RESOLUTION_REG","getVideoConstraints","item","test","videoNode","videoDevice","audioDevice","profile","createLocalVideoStream","publishStream","err","interactiveInstance","remoteStreams","checkSystemRequirements","startPushStream","option","roomInitGroupServer","createInteractive","interactives","instance","createLocalStream","createLocaldesktopStream","createLocalAudioStream","createLocalPhotoStream","stopStream","destroyStream","unpublishStream","subscribeStream","unSubscribeStream","setDual","muteVideo","muteAudio","startBroadCast","stopBroadCast","setBroadCastLayout","setBroadCastScreen","getCameras","getMicrophones","getSpeakers","isScreenShareSupported","getPacketLossRate","getRoomStreams","remoteStreamList","remoteStream","getRemoteStreams","push","mountSDK","src","Promise","resolve","node","document","BUSE_URL","TOKEN","LIVETOKEN","HEADERS","setBaseUrl","url","setToken","token","livetoken","setRequestHeaders","options","$fetch","reject","live_token","formatParams","dataType","jsonp","json","success","fail","xhr","type","toUpperCase","window","XMLHttpRequest","ActiveXObject","onreadystatechange","status","response","readyState","getResponseHeader","indexOf","responseXML","JSON","parse","responseText","open","setRequestHeader","Object","getOwnPropertyNames","forEach","send","callbackName","script","createElement","charset","body","appendChild","val","removeChild","clearTimeout","timer","time","setTimeout","head","parmas","arr","encodeURIComponent","join","getWebinarInfo","$http","webinar_id","webinarId","watchInitData","webinar","id","is_no_check","getConfigList","webinar_user_id","userinfo","user_id","scene_id","setDevice","room_id","interact","roomBase","loginInfo","way","phone","usernames","dynamic_code","captchas","visitor_id","uuid","loginKey","account","ruleForm","username","password","retPassword","captcha","phoneKey","remember","callbackUserInfo","source","register","codeCheck","resetPassword","assign","biz_id","userBase","RequestApi","live","VhallSaasSDK","requestApi","user","useRoomBaseServer","getWatchInitData","code","inited","watchInitErrorData","isLiveOver","webinarVo","undefined","configList","permissions","startLive","endLive","useUserServer","useRoomInitGroupServer","bizId","roomBaseServer","msgServer","interactiveServer","setRequestConfig","development","liveToken","requestHeaders","initSdk","result","reload","initSendLive","customOptions","defaultOptions","clientType","platform","initReceiveLive","receiveType"],"mappings":"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"}